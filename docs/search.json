[{"path":"https://morinlab.github.io/GAMBLR.results/articles/GAMBLR-results.html","id":"todo","dir":"Articles","previous_headings":"","what":"ToDo","title":"GAMBLR.results","text":"","code":"/$$$$$$     /$$$$$$    /$$      /$$   /$$$$$$$    /$$        .:::::::  /$$__  $$   /$$__  $$  | $$$    /$$$  | $$__  $$  | $$        .::    .:: | $$  \\__/  | $$  \\ $$  | $$$$  /$$$$  | $$  \\ $$  | $$        .::    .:: | $$ /$$$$  | $$$$$$$$  | $$ $$/$$ $$  | $$$$$$$   | $$   <-   .: .:: | $$|_  $$  | $$__  $$  | $$  $$$| $$  | $$__  $$  | $$        .::  .:: | $$  \\ $$  | $$  | $$  | $$\\  $ | $$  | $$  \\ $$  | $$        .::    .:: |  $$$$$$/  | $$  | $$  | $$ \\/  | $$  | $$$$$$$/  | $$$$$$$$  .::      .::  \\______/   |__/  |__/  |__/     |__/  |_______/   |________/  ~GENOMIC~~~~~~~~~~~~~OF~~~~~~~~~~~~~~~~~B-CELL~~~~~~~~~~~~~~~~~~IN~~~~~~  ~~~~~~~~~~~~ANALYSIS~~~~~~MATURE~~~~~~~~~~~~~~~~~~~LYMPHOMAS~~~~~~~~~~R~"},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"run-the-test-script","dir":"Articles","previous_headings":"","what":"Run the test script","title":"Testing GAMBLR packages","text":"First, need top level directory repository: Assuming installation R path dependencies installed, can simply run command wait complete. time takes can vary lot. Testing GAMBLR.results might take 30 minutes.","code":"cd ~/git/GAMBLR.results/ Rscript tools/logExampleOutputs.R"},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"check-outputs","dir":"Articles","previous_headings":"","what":"Check outputs","title":"Testing GAMBLR packages","text":"top-level directory package contain file named GAMBLR_examples_output.log. output script just ran. Since ’s tracked git, able compare newly created version one master branch. first lines file GAMBLR.results shown . can view entire file . Important easiest way check file problems load Visual Studio Code ’ve loaded repository. long git extension set properly, see differences automatically. changes see timestamps possibly formatting differences tabular output.","code":"[1] \"=== STARTED AT 2025-02-26 10:42:57.135744 ===\" ── Running 71 example files ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── GAMBLR.results ──  > my_metadata = suppressMessages(get_gambl_metadata())  > some_coding_ssm = get_coding_ssm(these_samples_metadata = my_metadata, +     projection = \"grch37\", this_seq_type = \"genome\") %>% dplyr::filter(Hugo_Symbol %in% +     c(\"EZH2\", \"MEF2B\", \"MYD88\", \"KMT2D\")) %>% dplyr::arrange(Hugo_Symbol)"},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"fix-problems","dir":"Articles","previous_headings":"","what":"Fix problems","title":"Testing GAMBLR packages","text":"Depending ’ve done existing code, may find log file either truncated output one functions changed way unexpected (e.g. different numbers etc). truncated log file indicates one existing examples failed run. debug , ’ll need determine function failing. can usually determine last function ran successfully looking log truncated. typically change existing examples fix issues. Instead, ’ll need determine change pull request caused example break address code. identify cause changes , necessary, fix bugs caused .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"truncated-file","dir":"Articles","previous_headings":"","what":"Truncated file?","title":"Testing GAMBLR packages","text":"truncated log file indicates one existing examples failed run. debug , ’ll need determine function failing. can usually determine last function ran successfully looking log truncated. typically change existing examples fix issues. Instead, ’ll need determine change pull request caused example break address code.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"different-output","dir":"Articles","previous_headings":"","what":"Different output","title":"Testing GAMBLR packages","text":"identify cause changes , necessary, fix bugs caused .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"add-examples-test-again","dir":"Articles","previous_headings":"","what":"Add examples, test again","title":"Testing GAMBLR packages","text":"created new functionality GAMBLR package, ’s responsibility ensure documentation affected function(s) complete --date. means example documentation demonstrates new functionality works. ’s probably easier add new example ’ve ensured current tests completing successfully. Important Don’t forget update documentation example runnable: submit pull request, sure ’ve added relevant example(s) re-run tests. log file entire output committed included part pull request. ’ve completed , ready submit pull request.","code":"devtools::document() git add GAMBLR_examples_output.log git commit -m \"testing completed\""},{"path":"https://morinlab.github.io/GAMBLR.results/articles/testing.html","id":"checklist-before-requesting-a-review","dir":"Articles","previous_headings":"","what":"Checklist before requesting a review","title":"Testing GAMBLR packages","text":"tested new function/functionality fresh workspace added least one working example demonstrates new functionality (applicable) test script tools/logExampleOutputs.R ran completion included file GAMBLR_examples_output.log pull request confirm changes file expected","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Morin. Author. Kostiantyn Dreval. Author, maintainer. Vladimir Souza. Author.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morin R, Dreval K, Souza V (2025). GAMBLR.results: Access results Genomic Analysis Mature B-cell Lymphomas. R package version 1.3, https://morinlab.github.io/GAMBLR.results/.","code":"@Manual{,   title = {GAMBLR.results: Access results of the Genomic Analysis of Mature B-cell Lymphomas},   author = {Ryan Morin and Kostiantyn Dreval and Vladimir Souza},   year = {2025},   note = {R package version 1.3},   url = {https://morinlab.github.io/GAMBLR.results/}, }"},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.results/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access results of the Genomic Analysis of Mature B-cell Lymphomas","text":"GAMBLR.results open-source package. can easily installed directly GitHub using command shown . Please note functionality provided package work users within BC Cancer network approved access underlying data sets. describe , recommend GAMBLR.open. install GAMBLR.results package necessary dependencies. requires access GSC resources intended used outside GSC. interested standalone functionality, please refer documentation GAMBLR.data package individual child package.","code":"devtools::install_github(\"morinlab/GAMBLR.results\", repos = BiocManager::repositories())"},{"path":"https://morinlab.github.io/GAMBLR.results/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Access results of the Genomic Analysis of Mature B-cell Lymphomas","text":"access gphost, easiest way obtain contribute GAMBLR via cloning repository R editor choice, set working directory place just cloned repo. Install package R running following command (requires devtools package) GAMBL users (GAMBLRs, speak) rely functionality package, Master branch protected. commits must submitted via pull request branch. Please refer GAMBL documentation details .","code":"cd git clone git@github.com:morinlab/GAMBLR.results.git setwd(\"~/GAMBLR.results\") devtools::install()"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/GAMBLR.results-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GAMBLR.results: Access results of the Genomic Analysis of Mature B-cell Lymphomas — GAMBLR.results-package","title":"GAMBLR.results: Access results of the Genomic Analysis of Mature B-cell Lymphomas — GAMBLR.results-package","text":"package part Genomic Analysis Mature B-cell Lymphomas (GAMBL) project developed Morin Lab.","code":""},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.results/reference/GAMBLR.results-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GAMBLR.results: Access results of the Genomic Analysis of Mature B-cell Lymphomas — GAMBLR.results-package","text":"Maintainer: Kostiantyn Dreval kdreval@sfu.ca (ORCID) Authors: Ryan Morin rdmorin@sfu.ca (ORCID) Vladimir Souza vsouza@bcgsc.ca","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/add_icgc_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ICGC metadata. — add_icgc_metadata","title":"Add ICGC metadata. — add_icgc_metadata","text":"Layer ICGC metadata supplemental table fill missing COO.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/add_icgc_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ICGC metadata. — add_icgc_metadata","text":"","code":"add_icgc_metadata(incoming_metadata)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/add_icgc_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ICGC metadata. — add_icgc_metadata","text":"incoming_metadata metadata table (probably output get_gambl_metadata).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/add_icgc_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ICGC metadata. — add_icgc_metadata","text":"Metadata layered information (ICGC).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/add_icgc_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add ICGC metadata. — add_icgc_metadata","text":"INTERNAL FUNCTION called get_gambl_metadata, meant --package usage.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/add_icgc_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add ICGC metadata. — add_icgc_metadata","text":"","code":"if (FALSE) { # \\dontrun{   my_meta = get_gambl_metadata()   icgc_metadata = add_icgc_metadata(incoming_metadata = my_meta) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_hotspots.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Hotspots. — annotate_hotspots","title":"Annotate Hotspots. — annotate_hotspots","text":"Annotate MAF-like data frome hot_spot column indicating recurrent mutations.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_hotspots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Hotspots. — annotate_hotspots","text":"","code":"annotate_hotspots(   mutation_maf,   recurrence_min = 5,   analysis_base = c(\"FL--DLBCL\", \"BL--DLBCL\"),   p_thresh = 0.05 )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_hotspots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Hotspots. — annotate_hotspots","text":"mutation_maf data frame MAF format. recurrence_min minimum number recurrences mutation included, default 5. analysis_base Base name hot spot output directory. p_thresh P value threshold, default 0.05.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_hotspots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Hotspots. — annotate_hotspots","text":"data frame one additional column \"hot_spot\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_hotspots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate Hotspots. — annotate_hotspots","text":"function takes already loaded MAF data frame mutation_maf parameter. user can control minimum number recurrences mutations included recurrance_min, default 5. analysis_base controls base name go hotspot output directory. Lastly, p_thresh sets p value threshold, default 0.05.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_hotspots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate Hotspots. — annotate_hotspots","text":"","code":"my_metadata = suppressMessages(get_gambl_metadata()) # get a few SSMs to annotate some_coding_ssm = get_coding_ssm(these_samples_metadata = my_metadata,                                 projection = \"grch37\",                                 this_seq_type = \"genome\") %>%                    dplyr::filter(Hugo_Symbol %in% c(\"EZH2\",\"MEF2B\",\"MYD88\",\"KMT2D\")) %>%                   dplyr::arrange(Hugo_Symbol) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) # peek at the data dplyr::select(some_coding_ssm,1:10,37) %>% head() #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>   Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position #> 1        EZH2              0      .     GRCh37          7      148504773 #> 2        EZH2              0      .     GRCh37          7      148504791 #> 3        EZH2              0      .     GRCh37          7      148504802 #> 4        EZH2              0      .     GRCh37          7      148506215 #> 5        EZH2              0      .     GRCh37          7      148506437 #> 6        EZH2              0      .     GRCh37          7      148506437 #>   End_Position Strand Variant_Classification Variant_Type HGVSp_Short #> 1    148504773      +      Missense_Mutation          SNP     p.Y741H #> 2    148504791      +      Missense_Mutation          SNP     p.Q735K #> 3    148504802      +          Splice_Region          SNP        <NA> #> 4    148506215      +      Missense_Mutation          SNP     p.I715F #> 5    148506437      +      Missense_Mutation          SNP     p.A692V #> 6    148506437      +      Missense_Mutation          SNP     p.A692V  hot_ssms = annotate_hotspots(some_coding_ssm) #> Adding missing grouping variables: `SYMBOL` #> Adding missing grouping variables: `SYMBOL` hot_ssms %>%     dplyr::filter(!is.na(hot_spot)) %>%     dplyr::select(1:10,37,hot_spot)  #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>    Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position #> 1         EZH2              0      .     GRCh37          7      148508727 #> 2         EZH2              0      .     GRCh37          7      148508727 #> 3         EZH2              0      .     GRCh37          7      148508727 #> 4         EZH2              0      .     GRCh37          7      148508727 #> 5         EZH2              0      .     GRCh37          7      148508727 #> 6         EZH2              0      .     GRCh37          7      148508727 #> 7         EZH2              0      .     GRCh37          7      148508727 #> 8         EZH2              0      .     GRCh37          7      148508727 #> 9         EZH2              0      .     GRCh37          7      148508727 #> 10        EZH2              0      .     GRCh37          7      148508727 #>    End_Position Strand Variant_Classification Variant_Type HGVSp_Short hot_spot #> 1     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 2     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 3     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 4     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 5     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 6     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 7     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 8     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 9     148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE #> 10    148508727      +      Missense_Mutation          SNP     p.Y646F     TRUE  if (FALSE) { # \\dontrun{ #This example will raise an error due to the user supplying an unsupported genome build: more_coding_ssm = get_coding_ssm(                                 these_samples_metadata = my_metadata,                                 projection = \"hg38\",                                 this_seq_type = \"capture\") %>%                    dplyr::filter(Hugo_Symbol %in% c(\"EZH2\",\"MEF2B\",\"MYD88\",\"KMT2D\")) %>%                   dplyr::arrange(Hugo_Symbol) # peek at the data dplyr::select(more_coding_ssm,1:10,37) %>% head()  more_hot_ssms = annotate_hotspots(more_coding_ssm) more_hot_ssms %>%     dplyr::filter(!is.na(hot_spot)) %>%     dplyr::select(1:10,37,hot_spot)  } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_maf_triplet.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate MAF with triplet context — annotate_maf_triplet","title":"Annotate MAF with triplet context — annotate_maf_triplet","text":"Give triple sequence mutated base adjacent bases (-1 +1)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_maf_triplet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate MAF with triplet context — annotate_maf_triplet","text":"","code":"annotate_maf_triplet(   maf,   all_SNVs = TRUE,   ref,   alt,   genome_build,   fastaPath,   pyrimidine_collapse = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_maf_triplet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate MAF with triplet context — annotate_maf_triplet","text":"maf MAF file (required columns: Reference_Allele, Tumor_Seq_Allele2) all_SNVs give us triplet sequences SNVs specifying specific ref alt alleles (default TRUE) ref Reference allele alt Alternative allele genome_build genome build variants working (default infer MAF) fastaPath Can path FASTA file disk. GSC, first attempted inferred gambl reference path specified config. Local files also accepted value . pyrimidine_collapse Estimate mutation_strand ","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_maf_triplet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate MAF with triplet context — annotate_maf_triplet","text":"data frame two three extra columns, case pyrimidine_collapse = FALSE, add triple sequence (seq) strand (mutation_strand). pyrimidine_collapse = T, another column also added extra columns shows mutation (mutation)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_maf_triplet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate MAF with triplet context — annotate_maf_triplet","text":"gives reference alternative alleles looks rows data frame based values + strand genes complement alleles rows - strand genes, can look adjacent bases mutation position. Also, can look SNVs MAF data frame provide triple sequences (reverse complement sequence - strand).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_maf_triplet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate MAF with triplet context — annotate_maf_triplet","text":"","code":"maf <- get_coding_ssm(projection = \"grch37\") %>% head(n = 500) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) # peek at the data dplyr::select(maf, 1:12) %>% head() #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>     Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position #> 1    AL627309.1              0      .     GRCh37          1         138626 #> 2    AL627309.1              0      .     GRCh37          1         138972 #> 3 RP11-206L10.9              0      .     GRCh37          1         730845 #> 4        FAM87B              0      .     GRCh37          1         753589 #> 5        SAMD11              0      .     GRCh37          1         871158 #> 6        SAMD11              0      .     GRCh37          1         871192 #>   End_Position Strand Variant_Classification Variant_Type Reference_Allele #> 1       138626      +                 Silent          SNP                T #> 2       138973      +        Frame_Shift_Ins          INS                - #> 3       730845      +          Splice_Region          SNP                G #> 4       753589      +          Splice_Region          SNP                A #> 5       871158      +                 Silent          SNP                C #> 6       871192      +      Missense_Mutation          SNP                C #>   Tumor_Seq_Allele1 #> 1                 T #> 2                 - #> 3                 G #> 4                 A #> 5                 C #> 6                 C  maf_anno <- annotate_maf_triplet(maf) dplyr::select(maf_anno, 1:12, seq) %>% head() #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>     Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position #> 1    AL627309.1              0      .     GRCh37          1         138626 #> 2    AL627309.1              0      .     GRCh37          1         138972 #> 3 RP11-206L10.9              0      .     GRCh37          1         730845 #> 4        FAM87B              0      .     GRCh37          1         753589 #> 5        SAMD11              0      .     GRCh37          1         871158 #> 6        SAMD11              0      .     GRCh37          1         871192 #>   End_Position Strand Variant_Classification Variant_Type Reference_Allele #> 1       138626      +                 Silent          SNP                T #> 2       138973      +        Frame_Shift_Ins          INS                - #> 3       730845      +          Splice_Region          SNP                G #> 4       753589      +          Splice_Region          SNP                A #> 5       871158      +                 Silent          SNP                C #> 6       871192      +      Missense_Mutation          SNP                C #>   Tumor_Seq_Allele1 seq #> 1                 T ATG #> 2                 -  NA #> 3                 G CGT #> 4                 A AAA #> 5                 C ACG #> 6                 C CCG # Each mutation is now associated with it's sequence context in the # reference genome in a column named seq if (FALSE) { # \\dontrun{ annotate_maf_triplet(maf, all_SNVs = FALSE, \"C\", \"T\") annotate_maf_triplet(maf, ref = \"C\", alt = \"T\", pyrimidine_collapse = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_blacklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate SSM with Blacklists — annotate_ssm_blacklist","title":"Annotate SSM with Blacklists — annotate_ssm_blacklist","text":"Annotate auto-drop MAF data frame existing blacklists.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_blacklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate SSM with Blacklists — annotate_ssm_blacklist","text":"","code":"annotate_ssm_blacklist(   mutations_df,   this_seq_type,   tool_name = \"slms_3\",   tool_version = \"1.0\",   annotator_name = \"vcf2maf\",   annotator_version = \"1.2\",   genome_build = \"grch37\",   project_base,   blacklist_file_template,   drop_threshold = 4,   return_blacklist = FALSE,   use_curated_blacklist = FALSE,   verbose = FALSE,   invert = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_blacklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate SSM with Blacklists — annotate_ssm_blacklist","text":"mutations_df data frame mutation data. this_seq_type seq_type mutations prefer apply corresponding blacklist. one seq_type can specified vector desired. parameter required. tool_name tool pipeline generated files (). tool_version version tool specified tool_name. annotator_name Name annotator, default \"vcf2maf\". annotator_version Version annotator specified annotator_name. genome_build genome build projection variants working (default grch37). project_base Optional: full path directory blacklist_file_pattern relative . blacklist_file_template Optional: string contains relative path blacklist file project_base (.e. results) wildcards surrounded curly braces. drop_threshold minimum count one blacklists drop variant. return_blacklist Boolean parameter returning blacklist. Default FALSE. use_curated_blacklist Boolean parameter using curated blacklist, default FALSE. verbose debugging, print bunch possibly useful information. invert USE CAUTION! returns variants dropped process (opposite want, probably).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_blacklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate SSM with Blacklists — annotate_ssm_blacklist","text":"MAF format data frame two new columns indicating number occurrences variant two blacklists.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_blacklist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate SSM with Blacklists — annotate_ssm_blacklist","text":"Annotate auto-drop MAF data frame existing blacklists remove variants dropped merge process. function returns MAF format data frame two new columns, indicating number occurrences variant two blacklists. Note collection parameters function improve flexibility many applications, return_blacklist (returns used blacklist vector given function, printed terminal blank). returning variants dropped, one can specify invert = TRUE, please use caution, likely opposite want function. Lastly, minimum count one blacklists drop variant specified drop_threshold = 4. function also conveniently lets know many variants dropped annotation process.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_blacklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate SSM with Blacklists — annotate_ssm_blacklist","text":"","code":"if (FALSE) { # \\dontrun{  #annotate MAF  deblacklisted_maf = annotate_ssm_blacklist(grande_maf,                                            this_seq_type = \"genome\",                                            genome_build = \"hg38\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_motif_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate mutations target motif — annotate_ssm_motif_context","title":"Annotate mutations target motif — annotate_ssm_motif_context","text":"Checks presence mutations given motif","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_motif_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate mutations target motif — annotate_ssm_motif_context","text":"","code":"annotate_ssm_motif_context(   maf,   motif = \"WRCY\",   index = 3,   genome_build,   fastaPath )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_motif_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate mutations target motif — annotate_ssm_motif_context","text":"maf MAF data frame (required columns: Reference_Allele, Chromosome, Start_Position, End_Position) motif motif sequence (default WRCY) index Position mutated allele motif genome_build genome build variants working (default grch37) fastaPath Can path FASTA file","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_motif_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate mutations target motif — annotate_ssm_motif_context","text":"data frame two extra columns (seq motif).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_motif_context.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate mutations target motif — annotate_ssm_motif_context","text":"positions reference allele mutated, capture (motif length - 1) (motif length + 1) alleles mutated position. , looks presence motif captured sequence check mutation occurred indexed position, return SITE motif present, mutation indexed position, return MOTIF. cases, return FALSE. NA shown mutation indel mutation.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/annotate_ssm_motif_context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate mutations target motif — annotate_ssm_motif_context","text":"","code":"my_maf <- get_coding_ssm() %>%    dplyr::filter(Hugo_Symbol==\"BCL2\") %>%   dplyr::arrange(Chromosome,Start_Position,Tumor_Sample_Barcode) %>%   head() #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat)  annotated = annotate_ssm_motif_context(maf = my_maf,                                        motif = \"WRCY\")  dplyr::select(annotated,1,5,6,11,13,16,seq,WRCY) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>   Hugo_Symbol Chromosome Start_Position Reference_Allele Tumor_Seq_Allele2 #> 1        BCL2         18       60795859                C                 T #> 2        BCL2         18       60795894                A                 T #> 3        BCL2         18       60795911                A                 G #> 4        BCL2         18       60795911                A                 G #> 5        BCL2         18       60795947                C                 G #> 6        BCL2         18       60985305              GTG               AAT #>   Tumor_Sample_Barcode       seq  WRCY #> 1      CAR_126_PreCART   CTTCACT FALSE #> 2            08-13706T   GCAAGCT MOTIF #> 3    00-15336_CLC01491   CCAAACT MOTIF #> 4    00-15336_CLC02290   CCAAACT MOTIF #> 5             FL1010T2   AATCAAA FALSE #> 6             SP192988 CAAGTGCAC FALSE"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/ashm_rainbow_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ASHM Rainbow Plot — ashm_rainbow_plot","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"Make rainbow plot mutations region, ordered coloured metadata.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/ashm_rainbow_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"","code":"ashm_rainbow_plot(   mutations_maf,   metadata,   exclude_classifications,   drop_unmutated = FALSE,   classification_column,   bed,   region,   custom_colours,   hide_ids = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/ashm_rainbow_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"mutations_maf data frame containing mutations (MAF format) within region interest (.e. use get_ssm_by_region). metadata data frame sample_id column. exclude_classifications Optional argument excluding specific classifications metadeta file. drop_unmutated Boolean argument removing unmutated sample ids mutated cases. classification_column name metadata column use ordering colouring samples. bed Optional data frame specifying regions annotate (required columns: start, end, name). region Genomic region plotting bed format. custom_colours Provide named vector (named list vectors) containing custom annotation colours want use standartized pallette. hide_ids Boolean argument, TRUE, ids removed.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/ashm_rainbow_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"ggplot2 object","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/ashm_rainbow_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"function creates rainbow plot mutations region. Region can either specified region parameter, user can provide maf already subset region(s) interest mutation_maf. third alternative, regions can also specified bed file bed. Lastly, function variety parameters can used customize returned plot many different ways. Refer parameter descriptions, examples well vignettes demonstrations function can called.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/ashm_rainbow_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.data)  #basic usage this_region = \"chr6:90975034-91066134\" this_metadata = get_gambl_metadata()  ashm_rainbow_plot(metadata = this_metadata,                   region = this_region) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assemble_file_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble File Details. — assemble_file_details","title":"Assemble File Details. — assemble_file_details","text":"Update database appending gambl_files table.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assemble_file_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble File Details. — assemble_file_details","text":"","code":"assemble_file_details(   file_details_df,   file_paths,   tool_name,   unix_group,   these_sample_ids,   output_type = \"ploidy\",   is_production = \"yes\" )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assemble_file_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble File Details. — assemble_file_details","text":"file_details_df Optionally supply data frame directly instead (e.g. find_files_extract_wildcards). file_paths vector full file paths, e.g. output dir. tool_name tool pipeline generated files (). unix_group unix group (). these_sample_ids vector sample_id length order file paths. output_type file type distinguish different output file types pipeline (e.g. seg, maf, ploidy). is_production Boolean parameter. Default yes.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assemble_file_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble File Details. — assemble_file_details","text":"Updates database appending gambl_files table. Use caution!","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assemble_file_details.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble File Details. — assemble_file_details","text":"Specify file paths file_paths followed name tool (tool_name). Next, set output type (e.g seq, maf, etc.) unix group (). Lastly, specify sample IDs these_sample_ids. information use optional parameters, refer parameter descriptions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assemble_file_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble File Details. — assemble_file_details","text":"","code":"if (FALSE) { # \\dontrun{ assemble_file_details(file_paths = c(one.maf, another.maf),                       tool_name = \"manta\",                       unix_group = \"genome\",                       output_type = \"maf\",                       these_sample_ids = c(one_sample, another_sample)) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assign_cn_to_ssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign CN state to SSMs. — assign_cn_to_ssm","title":"Assign CN state to SSMs. — assign_cn_to_ssm","text":"Annotate mutations copy number information.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assign_cn_to_ssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign CN state to SSMs. — assign_cn_to_ssm","text":"","code":"assign_cn_to_ssm(   these_samples_metadata,   maf_data,   seg_data,   projection,   coding_only = FALSE,   assume_diploid = FALSE,   include_silent = FALSE,   ... )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assign_cn_to_ssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign CN state to SSMs. — assign_cn_to_ssm","text":"these_samples_metadata Metadata table one rows specify samples process. maf_data data frame mutations MAF format maf_data object (e.g. get_coding_ssm get_ssm_by_sample). seg_data data frame segmented copy number data seg_data object projection Specified genome projection returned data relative . required inferred maf_df seg_df (provided). coding_only Optional. Set TRUE restrict variants coding space Default work genome-wide variants. assume_diploid Optional, parameter annotates every mutation copy neutral. Default FALSE. include_silent Logical parameter indicating whether include silent mutations coding space. Default FALSE. parameter makes sense coding_only set TRUE. ... additional parameters.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assign_cn_to_ssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign CN state to SSMs. — assign_cn_to_ssm","text":"list containing data frame (MAF-like format) three extra columns: - log.ratio log ratio seg file (NA overlap). - LOH - CN (rounded absolute copy number estimate region based log.ratio, NA overlap found).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assign_cn_to_ssm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign CN state to SSMs. — assign_cn_to_ssm","text":"function takes metadata table returns mutations samples metadata. mutation annotated local copy number state mutated site. user can specify coding mutations interest. , set coding_only = TRUE. necessary, function relies get_ssm_by_samples get_cn_segments obtain required data.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/assign_cn_to_ssm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign CN state to SSMs. — assign_cn_to_ssm","text":"","code":"if (FALSE) { # \\dontrun{  # long-handed way (mostly for illustration)  # 1. get some metadata for a collection of samples  some_meta = suppressMessages(get_gambl_metadata()) %>%         dplyr::filter(cohort==\"DLBCL_ICGC\")   # 2. Get the SSMs for these samples   ssm_genomes_grch37 = get_coding_ssm(projection = \"grch37\",                                   these_samples_metadata = some_meta)  # peek at the results  ssm_genomes_grch37 %>% dplyr::select(1:8)   # 3. Lazily let this function obtain the corresponding seg_data  #  for the right genome_build  cn_list = assign_cn_to_ssm(some_meta,ssm_genomes_grch37)   cn_list$maf %>% dplyr::select(1:8,log.ratio,CN)  # or using the other genome build:  ssm_genomes_hg38 = get_coding_ssm(projection = \"hg38\",                                   these_samples_metadata = some_meta)  cn_list = assign_cn_to_ssm(some_meta,ssm_genomes_hg38)  cn_list$maf %>% dplyr::select(1:8,log.ratio,CN) } # }  # Easiest/laziest way: Let the function obtain # the seg_data and maf_data for you   # 1. get some metadata for a collection of samples  some_meta = suppressMessages(get_gambl_metadata()) %>%         dplyr::filter(cohort==\"DLBCL_ICGC\") %>% head(3)  cn_list = assign_cn_to_ssm(these_samples_metadata = some_meta,                            projection = \"grch37\") #> dummy segments are not annotated in the inputs #> fill_missing_with parameter will be ignored #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Running in default mode of any...  cn_list$maf %>% dplyr::group_by(Tumor_Sample_Barcode,CN) %>%   dplyr::count() #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>    Tumor_Sample_Barcode       CN     n #> 1              SP124957 1.893249    17 #> 2              SP124957 2.000000 10263 #> 3              SP124957 2.112682    96 #> 4              SP124957 2.126767    59 #> 5              SP124957 2.144877   479 #> 6              SP124957 2.156021   149 #> 7              SP124957 3.000000    52 #> 8              SP124957 3.521206   344 #> 9              SP124957 3.551033   712 #> 10             SP124957 3.563755   145"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/build_browser_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Build UCSC browser track hub — build_browser_hub","title":"Build UCSC browser track hub — build_browser_hub","text":"Create directory contains track hub files. : hub.txt file (named <projection>_hub.txt marked useOneFile ), subdirectory (named projection use) custom tracks visualized UCSC browser. custom track regions contains regions SSMs retrieved. custom tracks contain SSMs samples separated splitColumnName parameter, file named according value splitColumnName refers .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/build_browser_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build UCSC browser track hub — build_browser_hub","text":"","code":"build_browser_hub(   maf_data,   regions_bed,   these_sample_ids = NULL,   these_samples_metadata = NULL,   these_seq_types = c(\"genome\", \"capture\"),   projection = \"grch37\",   local_web_host_dir = NULL,   hub_dir = \"my_hub\",   splitColumnName = \"pathology\",   hub_name = basename(hub_dir),   shortLabel = basename(hub_dir),   longLabel = basename(hub_dir),   contact_email,   visibility = \"squish\",   bigDataUrl_base = \"https://github.com/morinlab/LLMPP/blob/main\",   bedToBigBed_path )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/build_browser_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build UCSC browser track hub — build_browser_hub","text":"maf_data MAF-format data frame SSMs visualized UCSC browser. can filtered regions samples provided parameters regions_bed these_sample_ids/these_samples_metadata, respectively. regions_bed BED-format table regions want retrieve SSMs . columns 1, 2 3 must chromosome names, start positions end positions, respectively. provided, function defaults aSHM regions, .e. one GAMBLR.data::grch37_ashm_regions GAMBLR.data::hg38_ashm_regions, chosen automatically depending provided projection. these_sample_ids vector sample IDs want results . these_samples_metadata metadata table (sample IDs column) subset samples interest. these_seq_types vector one seq types want results . Possible values \"genome\" \"capture\". one seq type provided, value splitColumnName, function creates separate track provided seq type. default c(\"genome\", \"capture\"). See Details section information. projection projection genome build. One \"grch37\" (default) \"hg38\". local_web_host_dir Path directory local copy web host used. example, hub hosted GitHub, local_web_host_dir path local copy repository directory. Default NULL. hub_dir Path directory (inside web host) want build track hub. directory exist, created. splitColumnName single string indicate metadata column used split MAF data custom track files. Default \"pathology\". hub_name string hub name (without spaces) fill hub field hub.txt file. Default basename(hub_dir). shortLabel string short hub label (maximum 17 characters recommended; spaces allowed) fill shortLabel field hub.txt file. Default basename(hub_dir). longLabel string long hub label (maximum 80 characters recommended; spaces allowed) fill longLabel field hub.txt file. Default basename(hub_dir). contact_email Required parameter. string contact email fill email field hub.txt file. visibility string controls track visibility mode. Possible values \"pack\", \"dense\", \"full\", \"squish\" (default). bigDataUrl_base string base path web location tracks' data files (bigDataUrl fields hub.txt file). example, hub hosted GitHub, bigDataUrl_base something like \"https://github.com/morinlab/LLMPP/blob/main\" (default). See track's paths bigDataUrl fields set Details section. bedToBigBed_path Path local bedToBigBed UCSC tool. missing, GAMBLR.helpers::check_config_value called internally bedToBigBed path obtained config.yml file saved current working directory.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/build_browser_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build UCSC browser track hub — build_browser_hub","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/build_browser_hub.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build UCSC browser track hub — build_browser_hub","text":"build_browser_hub create custom track file combination these_seq_types splitColumnName (mutations can found). Custom track files named <a_seq_type_value>_<a_splitColumnName_value>.bb. bigDataUrl field track hub.txt file defined following way:   track_file_names[] custom track file name.","code":"file.path(bigDataUrl_base, hub_dir, projection,           paste0(track_file_names[i], \"?raw=true\\n\"))"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/build_browser_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build UCSC browser track hub — build_browser_hub","text":"","code":"if (FALSE) { # \\dontrun{ # create a track hub in LLMPP GitHub repo  library(GAMBLR.data)  local_web_host_dir = \"~/repos/LLMPP\" hub_dir = \"hubs/ashm_test\"  my_meta = get_gambl_metadata() %>%    filter(pathology %in% c(\"BL\", \"DLBCL\", \"FL\"))  build_browser_hub(   these_samples_metadata = my_meta,   these_seq_types = c(\"genome\", \"capture\"),   projection = \"grch37\",   local_web_host_dir = local_web_host_dir,   hub_dir = hub_dir,   splitColumnName = \"pathology\",   longLabel = \"Public aSHM mutations separated by pathologies\",   contact_email = \"rdmorin@sfu.ca\" ) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","title":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","text":"Count number mutations sliding window across region samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","text":"","code":"calc_mutation_frequency_bin_region(   region,   chromosome,   start_pos,   end_pos,   these_samples_metadata,   these_sample_ids = NULL,   maf_data = NULL,   projection = \"grch37\",   slide_by = 100,   window_size = 1000,   return_format = \"long\",   min_count_per_bin = 0,   return_count = TRUE,   drop_unmutated = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","text":"region string describing genomic region \"chrom:start-end\" format. region must specifed format separate chromosome, start_pos, end_pos arguments. chromosome Chromosome name region. start_pos Start coordinate region. end_pos End coordinate region. these_samples_metadata Optional data frame containing sample_id column. providing maf file, seq_type also required column. these_sample_ids Optional vector sample IDs. Output subset IDs present vector. maf_data Optional maf data frame. subset rows Tumor_Sample_Barcode matches provided sample IDs metadata table. provided, maf data obtained get_ssm_by_regions(). projection Specify genome build use. Required. slide_by Slide size sliding window. Default 100. window_size Size sliding window. Default 1000. return_format Return format mutations. Accepted inputs \"long\" \"wide\". Long returns data frame one sample ID/window per row. Wide returns matrix one sample ID per row one window per column. Using \"wide\" format retain samples windows regardless drop_unmutated min_count_per_bin parameters. min_count_per_bin Minimum counts per bin, default 0. Setting greater 0 drop unmutated windows return_format long. return_count Boolean statement return mutation count per window (TRUE) binary mutated/unmutated status (FALSE). Default TRUE. drop_unmutated Boolean whether drop windows 0 mutations. effective \"long\" return format.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","text":"Either matrix long tidy table counts per window.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","text":"function called return mutation frequency given region, either provided input maf data frame GAMBL maf data. Regions specified regionparameter. Alternatively, region interest can also specified calling function chromosome, start_pos, end_pos parameters. function operates single region. return matrix sliding window counts multiple regions, see calc_mutation_frequency_bin_regionUse .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mutation Frequency By Sliding Window. — calc_mutation_frequency_bin_region","text":"","code":"meta = suppressMessages(get_gambl_metadata()) %>%                          dplyr::filter(pathology==\"MCL\")  mut_freq = calc_mutation_frequency_bin_region(these_samples_metadata = meta,                                               region = \"11:69455000-69459900\",                                               slide_by = 10,                                               window_size = 10000) #> processing bins of size 10000 across 4900 bp region #> Using GAMBLR.results::get_ssm_by_region... #> Joining with `by = join_by(sample_id)` #> Joining with `by = join_by(window_start)` head(mut_freq) #> # A tibble: 6 × 3 #>   sample_id bin         mutation_count #>   <chr>     <chr>                <int> #> 1 01-11817T 11_69455000              5 #> 2 01-11817T 11_69455010              5 #> 3 01-11817T 11_69455020              5 #> 4 01-11817T 11_69455030              5 #> 5 01-11817T 11_69455040              5 #> 6 01-11817T 11_69455050              5  if (FALSE) { # \\dontrun{ # This will fail because the chromosome naming doesn't match the default projection  misguided_attempt = calc_mutation_frequency_bin_region(these_samples_metadata = meta,                                                          region = \"chr11:69455000-69459900\",                                                          slide_by = 10,                                                          window_size = 10000)  # This will work! mut_freq = calc_mutation_frequency_bin_region(these_samples_metadata = meta,                                                          region = \"chr11:69455000-69459900\",                                                          slide_by = 10,                                                          window_size = 10000,projection=\"hg38\") head(mut_freq) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","title":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","text":"Obtain long tidy wide matrix mutation counts across sliding windows multiple regions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","text":"","code":"calc_mutation_frequency_bin_regions(   regions_list = NULL,   regions_bed = NULL,   these_samples_metadata = NULL,   these_sample_ids = NULL,   projection,   region_padding = 1000,   drop_unmutated = FALSE,   skip_regions = NULL,   only_regions = NULL,   slide_by = 100,   window_size = 500,   return_format = \"wide\" )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","text":"regions_list Named vector regions format c(name1 = \"chr:start-end\", name2 = \"chr:start-end\"). neither regions regions_bed specified, function use GAMBLR aSHM region information. regions_bed Data frame regions four columns (chrom, start, end, name). these_samples_metadata Metadata least sample_id column. providing maf data frame, seq_type also required. these_sample_ids Vector sample IDs. Metadata subset sample IDs present vector. projection Genome build function operate . Ensure matches provided regions maf data correct chr prefix handling. Default \"grch37\". region_padding Amount pad start end coordinates . Default 1000. drop_unmutated Whether drop bins 0 mutations. returning matrix format, drop bins mutations samples. skip_regions Optional character vector genes exclude default aSHM regions. only_regions Optional character vector genes include default aSHM regions. slide_by Slide size sliding window. Default 100. window_size Size sliding window. Default 500. return_format Return format mutations. Accepted inputs \"long\" \"wide\". Long returns data frame one sample ID/window per row. Wide returns matrix one sample ID per row one window per column. Using \"wide\" format retain samples windows regardless drop_unmutated min_count_per_bin parameters. Default wide.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","text":"table mutation counts sliding windows across one regions. May long wide.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","text":"function takes metadata table these_samples_metadata parameter internally calls calc_mutation_frequency_bin_region (internally calls get_ssm_by_regions). retrieve mutation counts sliding windows across one regions. May optionally provide combination maf data frame, existing metadata, regions data frame named vector. heatmap plotting portion function moved heatmap_mutation_frequency_bin.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/calc_mutation_frequency_bin_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutation counts across sliding windows for multiple regions. — calc_mutation_frequency_bin_regions","text":"","code":"if (FALSE) { # \\dontrun{  #load metadata.  metadata = suppressMessages(get_gambl_metadata())  dlbcl_bl_meta = dplyr::filter(metadata, pathology %in% c(\"DLBCL\", \"BL\"))   #get ashm regions  some_regions = create_bed_data(GAMBLR.data::grch37_ashm_regions,                                fix_names = \"concat\",                                concat_cols = c(\"gene\",\"region\"),sep=\"-\")  some_regions  mut_count_matrix <- calc_mutation_frequency_bin_regions(    these_samples_metadata = dlbcl_bl_meta,    regions_bed = some_regions  ) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cBioPortal Study. — cbio_create","title":"Create cBioPortal Study. — cbio_create","text":"Wrapper function creating import-ready cBioPortal study.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cBioPortal Study. — cbio_create","text":"","code":"cbio_create(   these_samples_metadata = NULL,   maf_data = NULL,   this_seq_type = \"genome\",   short_name = \"GAMBL\",   human_friendly_name = \"GAMBL data\",   project_name = \"gambl_genome\",   description = \"GAMBL data from genome\",   gambl_maf = \"maf_slms3_hg19\",   gambl_icgc_maf = \"maf_slms3_hg19_icgc\",   cancer_type = \"mixed\",   overwrite = TRUE,   check_study = TRUE,   out_dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cBioPortal Study. — cbio_create","text":"these_samples_metadata Metadata samples included study. maf_data Data frame maf data samples study. this_seq_type seq type want generate study . Default \"genome\". short_name concise name portal project. Default \"GAMBL\". human_friendly_name slightly verbose name project. Default \"GAMBL data\". project_name Unique ID project. Default \"gambl_all\". description verbose description data set. study named accessing cBioPortal. Default \"GAMBL data genome\". gambl_maf MAF origin. gambl_icgc_maf ICGC MAF origin. cancer_type Cancer types included study, default \"mixed\". overwrite Flag specify files overwritten exist. Default TRUE. check_study Boolean parameter controls generated study checked sample IDs case lists, described clinical file. Default TRUE. out_dir full path base directory files created.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cBioPortal Study. — cbio_create","text":"Nothing. Rather, function generates files necessary successfully importing study active cBioPortal instance.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create cBioPortal Study. — cbio_create","text":"function internally calls cbio_setup_study, cbio_setup_fusions, cbio_finalize_study cbio_study_check generate necessary files importing study cBioPortal. function developed streamline step time ensure study information selected data type consistent throughout individual steps generating study. addition, user can also control generated study checked sample IDs case lists described clinical file. potentially prevent annoying error prevents study imported active cBioPortal instance, default TRUE. Fusions also handled based selected seq type (this_seq_type).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cBioPortal Study. — cbio_create","text":"","code":"if (FALSE) { # \\dontrun{ #generate cBioPortal study for all GAMBL genome samples: cbio_create()  #generate a cBioPortal study for all GAMVL capture samples: cbio_create(this_seq_type = \"capture\", description = \"GAMBL data from exomes\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_custom_caselist.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom cBioPortal case list. — cbio_custom_caselist","title":"Custom cBioPortal case list. — cbio_custom_caselist","text":"Create custom case list easy data subset cBioPortal.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_custom_caselist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom cBioPortal case list. — cbio_custom_caselist","text":"","code":"cbio_custom_caselist(   these_sample_ids,   caselist_name,   caselist_description,   return_missing_samples = FALSE,   dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_custom_caselist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom cBioPortal case list. — cbio_custom_caselist","text":"these_sample_ids vector sample IDs subset case list. Required parameter. caselist_name Name generated case list (name include file format, added automagically). parameter required. caselist_description verbose description created case list. Required. return_missing_samples Boolean parameter. Set TRUE return sample IDs desired case list, represented study specific clinical file. Default FALSE. dir directory study specific files live.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_custom_caselist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom cBioPortal case list. — cbio_custom_caselist","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_custom_caselist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom cBioPortal case list. — cbio_custom_caselist","text":"Convenience function specifying custom case lists can browsed cBioPortal. function takes set sample IDs these_sample_ids intersect IDs available study-specific clinical file. function also extracts project name specified study, .e project name defined withing folder specified dir parameter.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_custom_caselist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom cBioPortal case list. — cbio_custom_caselist","text":"","code":"if (FALSE) { # \\dontrun{ #get some sample IDs my_samples = get_gambl_metadata() %>%  dplyr::filter(pathology == \"FL\") %>%  dplyr::filter(cohort == \"FL_GenomeCanada\") %>%  pull(sample_id)  #create case list with selected sample IDs cbio_custom_caselist(these_sample_ids = my_samples,                      caselist_name = \"FL_Canada\",                      caselist_description = \"Follicular Lymphoma from the Genome Canada Study\",                      dir = \"../path/to/study_directory/\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_finalize_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Finalize Study (cBioPortal). — cbio_finalize_study","title":"Finalize Study (cBioPortal). — cbio_finalize_study","text":"Finish setting new cBioPortal instance updating existing portal data set.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_finalize_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finalize Study (cBioPortal). — cbio_finalize_study","text":"","code":"cbio_finalize_study(   seq_type_filter = \"genome\",   short_name = \"GAMBL\",   human_friendly_name = \"GAMBL data\",   project_name = \"gambl_genome\",   description = \"GAMBL data from genome\",   cancer_type = \"mixed\",   these_sample_ids,   overwrite = TRUE,   metacols,   metacol_names,   metacol_types,   metacol_prior,   out_dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_finalize_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finalize Study (cBioPortal). — cbio_finalize_study","text":"seq_type_filter seq type setting study , default \"genome\". short_name concise name portal project. human_friendly_name slightly verbose name project. project_name Unique ID project. description verbose description data set. cancer_type Cancer types included study, default \"mixed\". these_sample_ids vector sample_id included data files cBioPortal (.e output setup_study setup_fusions). overwrite Flag specify files overwritten exist. Default TRUE. metacols Optional, specify additional metadata/collate_result fields included cBioPortal metadata. Extra columns specified vector characters. provided, \"standard\" metadata fields kept. metacol_names Separately specify names columns given metacols vector characters. number elements needs match total number columns specified metacols. Required parameter metacols called. metacol_types Specify data type selected metadata columns vector characters. number elements specified needs match number selected columns metacols. Acceptable values ; STRING, NUMBER BOOLEAN. Required parameter metacols called. metacol_prior Explicitly state priority selected metadata columns vector characters. higher number indicates higher priority. Required parameter metacols called. out_dir full path base directory files created.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_finalize_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finalize Study (cBioPortal). — cbio_finalize_study","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_finalize_study.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finalize Study (cBioPortal). — cbio_finalize_study","text":"function run last (third step) setting new cBioPortal instance. functions run prior functions ; cbio_setup_study cbio_setup_fusions. cbio_finalize_study creates necessary tables metadata files case lists required import new study cBioPortal. Note, parameter arguments used function match parameter arguments previously run functions (setup_study setup_fusions). function allows user specify additional fields collated metadata file (besides \"standard\" fields). information use, see metacols related parameters (metacol_names, metacol_types, meta_prior).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_finalize_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finalize Study (cBioPortal). — cbio_finalize_study","text":"","code":"if (FALSE) { # \\dontrun{ #basic usage cbio_finalize_study(these_sample_ids = c(ids, fusion_ids), out_dir = \"GAMBLR/cBioPortal/instance01/\")  #advanced usage #get some samples all_meta = get_gambl_metadata() meta_sub = head(all_meta, 5) my_samples = pull(meta_sub, sample_id)  #create a clinical file with additional collated metadata fields cbio_finalize_study(these_sample_ids = my_samples,                     out_dir = \"../\",                     metacols = c(\"MeanCorrectedCoverage\", \"total_ssm\"),                     metacol_names = c(\"Mean Corrected Coverage\", \"Total SSM\"),                     metacol_types = c(\"NUMBER\", \"NUMBER\"),                     metacol_prior = c(\"2\", \"1\")) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_expreession_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","title":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","text":"Generate expression data based set genes, format export data cBioPortal.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_expreession_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","text":"","code":"cbio_setup_expreession_data(   project_name = \"gambl_genome\",   clinical_file_path = \"data_clinical_samples.txt\",   these_genes,   expression_df,   out_dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_expreession_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","text":"project_name Unique ID project. clinical_file_path path study specific clinical file (data_clinical_samples.txt). these_genes Specify set genes (character vectors) want return expression data . genes provided, function resort lymphoma genes. expression_df Optional argument providing already loaded expression matrix. out_dir full path base directory files created.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_expreession_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","text":"vector characters sample IDs expression data generated .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_expreession_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","text":"function takes set genes these_genes (character vectors) parameter returns expression data. Expression data formatted match expected format import cBioPortal study. genes provided, function default genes defined GAMBLR.data::lymphoma_genes bundled data. function internally calls get_gene_expression returning expression data outlined .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_expreession_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Expression Data (cBioPortal). — cbio_setup_expreession_data","text":"","code":"if (FALSE) { # \\dontrun{ #return expression data for lymphoma genes (all samples) expression_ids = cbio_setup_expression_data(out_dir = \"../../\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_fusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Fusions (cBioPortal). — cbio_setup_fusions","title":"Setup Fusions (cBioPortal). — cbio_setup_fusions","text":"Annotate SVs create input fusions displayed cBioPortal instance.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_fusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Fusions (cBioPortal). — cbio_setup_fusions","text":"","code":"cbio_setup_fusions(   short_name = \"GAMBL\",   human_friendly_name = \"GAMBL data\",   project_name = \"gambl_genome\",   description = \"GAMBL data from genome\",   gambl_maf = \"maf_slms3_hg19\",   gambl_icgc_maf = \"maf_slms3_hg19_icgc\",   out_dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_fusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Fusions (cBioPortal). — cbio_setup_fusions","text":"short_name concise name portal project. human_friendly_name slightly verbose name project. project_name Unique ID project. description verbose description data set. gambl_maf maf origin. gambl_icgc_maf ICGC maf origin. out_dir full path base directory files created.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_fusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Fusions (cBioPortal). — cbio_setup_fusions","text":"vector sample_id patients included.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_fusions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Fusions (cBioPortal). — cbio_setup_fusions","text":"function calls get_combined_sv runs annotation returned data frame. run next step running cbio_setup_study. Note parameters called function match parameter arguments cbio_setup_study, .e short_name cbio_setup_study \"GAMBL\", short_name cbio_setup_fusions also \"GAMBL\", etc.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_fusions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Fusions (cBioPortal). — cbio_setup_fusions","text":"","code":"if (FALSE) { # \\dontrun{ fusion_ids = cbio_setup_fusions(out_dir = \"GAMBLR/cBioPortal/instance01/\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Study (cBioPortal). — cbio_setup_study","title":"Setup Study (cBioPortal). — cbio_setup_study","text":"Initialize new cBioPortal instance update existing portal data set, can also used retrieve sample ids included study.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Study (cBioPortal). — cbio_setup_study","text":"","code":"cbio_setup_study(   these_samples_metadata = NULL,   maf_data = NULL,   seq_type_filter = \"genome\",   short_name = \"GAMBL\",   human_friendly_name = \"GAMBL data\",   project_name = \"gambl_genome\",   description = \"GAMBL data from genome\",   overwrite = TRUE,   out_dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Study (cBioPortal). — cbio_setup_study","text":"these_samples_metadata Metadata samples included study. maf_data Data frame maf data samples study. seq_type_filter seq type setting study , default \"genome\". short_name concise name portal project. human_friendly_name slightly verbose name project. project_name Unique ID project. description verbose description data set. overwrite Flag specify files overwritten exist. Default TRUE. out_dir full path base directory files created.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Study (cBioPortal). — cbio_setup_study","text":"vector sample_id patients included.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_study.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Study (cBioPortal). — cbio_setup_study","text":"function internally calls get_coding_ssm retrieve coding mutations included study (overwrite = TRUE). Optionally, provide data frame somatic mutations maf_data argument. addition, function also creates sets proper folder hierarchy writes files necessary import new cBioPortal study. study ready imported cBioPortal, user also needs run cbio_setup_fusions cbio_finalize_study. Optionally user can also run cbio_study_check ensure samples described \"clinical\" file included study. Also, note parameters chosen function match parameters called subsequent study function calls.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_setup_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Study (cBioPortal). — cbio_setup_study","text":"","code":"#Setup study and save included ids as a vector of characters: if (FALSE) { # \\dontrun{ ids = cbio_setup_study(out_dir = \"GAMBLR/cBioPortal/instance01/\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_study_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Study Check (cBioPortal). — cbio_study_check","title":"Study Check (cBioPortal). — cbio_study_check","text":"Helper function checking integrity study files.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_study_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Study Check (cBioPortal). — cbio_study_check","text":"","code":"cbio_study_check(   data_clinical_samples_path = \"data_clinical_samples.txt\",   data_fusions_path = \"data_fusions.txt\",   cases_fusions_path = \"case_lists/cases_fusion.txt\",   this_seq_type = \"genome\",   cases_all_path = \"case_lists/cases_all.txt\",   cases_sequenced_path = \"case_lists/cases_sequenced.txt\",   project_name = \"gambl_genome\",   out_dir )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_study_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Study Check (cBioPortal). — cbio_study_check","text":"data_clinical_samples_path Path clinical file. data_fusions_path Path data_fusion file setup_fusions. cases_fusions_path Path cases_fusion setup_fusions. this_seq_type seq type data. cases_all_path Path cases_all setup_study. cases_sequenced_path Path cases_sequenced setup_study. project_name Project name, match specified setup_study/setup_fusions. out_dir Directory study related files, argument needs specified, given paths generated study files changed default.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_study_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Study Check (cBioPortal). — cbio_study_check","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_study_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Study Check (cBioPortal). — cbio_study_check","text":"function designed ensure sample IDs described maf actually present clinical files. case, function notify user samples found case list described clinical file. function sub-sets case list include samples clinical file. Note project_name match specified previously run functions (.e cbio_setup_study, cbio_setup_fusions cbio_finalize_study).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cbio_study_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study Check (cBioPortal). — cbio_study_check","text":"","code":"if (FALSE) { # \\dontrun{ samples_not_in_clinical = cbio_study_check(out_dir = \"GAMBLR/cBioPortal/instance01/\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gambl_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check GAMBL Metadata. — check_gambl_metadata","title":"Check GAMBL Metadata. — check_gambl_metadata","text":"Check GAMBL metadata compatibility various features.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gambl_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check GAMBL Metadata. — check_gambl_metadata","text":"","code":"check_gambl_metadata(   metadata_df,   to_check = \"all\",   show_details = FALSE,   fix = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gambl_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check GAMBL Metadata. — check_gambl_metadata","text":"metadata_df Data frame output get_gambl_metadata source metadata plan use. to_check Specify one \"uniqueness\", \"colours\" \"completeness\" leave empty check . show_details Set TRUE want gory details issues identified. fix identifying issue, rerun function fix=TRUE address errors (possible). Currently anything. roll.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gambl_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check GAMBL Metadata. — check_gambl_metadata","text":"Give function metadata output, preferably get_gambl_metadata, source. function checks duplicate sample IDs, colours values columns map colour map_metadata_to_colours missing columns.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gambl_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check GAMBL Metadata. — check_gambl_metadata","text":"","code":"if (FALSE) { # \\dontrun{ this_metadata = get_gambl_metadata() check_gambl_metadata(metadata_df = this_metadata) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gamblr_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Check GAMBLR Config. — check_gamblr_config","title":"Check GAMBLR Config. — check_gamblr_config","text":"Check GAMBLR config loaded work setup.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gamblr_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check GAMBLR Config. — check_gamblr_config","text":"","code":"check_gamblr_config(   compare_timestamps = FALSE,   ssh_session,   archive_mode = FALSE,   force_backup = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gamblr_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check GAMBLR Config. — check_gamblr_config","text":"compare_timestamps Whether function compare timestamps local files remote copy. relevant working remotely. ssh_session ssh_session object see get_ssh_session() information. relevant working remotely. archive_mode currently working idea keep GSC archive GAMBL sync actively updated outputs force_backup Boolean parameter set FALSE per default.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gamblr_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check GAMBLR Config. — check_gamblr_config","text":"function mostly remote GAMBLRs ensure keep local mirror GAMBL data --date.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gamblr_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check GAMBLR Config. — check_gamblr_config","text":"","code":"if (FALSE) { # \\dontrun{ check_gamblr_config() } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gene_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Gene Expression. — check_gene_expression","title":"Check Gene Expression. — check_gene_expression","text":"function determines samples expression data available merge drop redundant data consistently prioritizing protocol nucleic acid source.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gene_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Gene Expression. — check_gene_expression","text":"","code":"check_gene_expression(verbose = F, show_linkages = F, ...)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gene_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Gene Expression. — check_gene_expression","text":"verbose Set TRUE mainly debugging show_linkages Set TRUE link every row available capture genome sample using get_gambl_metadata prioritize one per biopsy_id ... Optional parameters pass along get_gambl_metadata (used show_linkages = TRUE)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_gene_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Gene Expression. — check_gene_expression","text":"data frame row non-redundant RNA-seq result following columns: mrna_sample_id unique sample_id value match single row GAMBL metadata seq_type mrna. biopsy_id unique identifier source nucleic acids. sample_id Identical mrna_sample_id capture_sample_id biopsy capture/exome data GAMBL metadata, value sample_id data. NA otherwise. genome_sample_id biopsy genome data GAMBL metadata, value sample_id data. NA otherwise. patient_id anonymized unique identifier patient. BC samples, Res ID. seq_type assay type used produce data (always \"mrna\" case) protocol Specifies RNA-seq library construction protocol. ffpe_or_frozen Specifies way source nucleic acids preserved. Either FFPE frozen.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_host.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Host. — check_host","title":"Check Host. — check_host","text":"Check code running remotely react accordingly.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_host.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Host. — check_host","text":"","code":"check_host(auto_connect = FALSE, verbose = FALSE)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_host.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Host. — check_host","text":"auto_connect Set TRUE want function create ssh session (necessary). verbose Set TRUE verbose messages function.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_host.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Host. — check_host","text":"TRUE remote session detected, FALSE otherwise.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_host.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Host. — check_host","text":"function (optionally) attempt connection necessary, stores global variable (ssh_session).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_host.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Host. — check_host","text":"","code":"if (FALSE) { # \\dontrun{ check_host(auto_connect=TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_remote_configuration.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Remote Configuration. — check_remote_configuration","title":"Check Remote Configuration. — check_remote_configuration","text":"Check remote session automagically confirm setup work properly.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_remote_configuration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Remote Configuration. — check_remote_configuration","text":"","code":"check_remote_configuration(auto_connect = FALSE)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_remote_configuration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Remote Configuration. — check_remote_configuration","text":"auto_connect Set TRUE ensure ssh_session created absent","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_remote_configuration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Remote Configuration. — check_remote_configuration","text":"TRUE remote session detected, FALSE otherwise.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_remote_configuration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Remote Configuration. — check_remote_configuration","text":"function determines user working GAMBLR remotely , , check config loaded properly ssh_session available.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/check_remote_configuration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Remote Configuration. — check_remote_configuration","text":"","code":"if (FALSE) { # \\dontrun{ check_remote_configuration() } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cleanup_maf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup MAF. — cleanup_maf","title":"Cleanup MAF. — cleanup_maf","text":"Transform input maf columns allow usage dplyr verbs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cleanup_maf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup MAF. — cleanup_maf","text":"","code":"cleanup_maf(maf_df)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cleanup_maf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup MAF. — cleanup_maf","text":"maf_df input MAF data frame.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cleanup_maf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup MAF. — cleanup_maf","text":"maf_df transformed columns","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cleanup_maf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cleanup MAF. — cleanup_maf","text":"Transform input maf columns allow usage dplyr verbs. Allowing stright-forward plotting workflow well downstream data aggregation manipulation. function expects set number columns exist incoming maf order work. view columns, see bundled data GAMBLR.data.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/cleanup_maf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup MAF. — cleanup_maf","text":"","code":"if (FALSE) { # \\dontrun{ maf <- get_coding_ssm(basic_columns = FALSE) clean_maf = cleanup_maf(maf_df = maf) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_lymphgen.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate Lymphgen. — collate_lymphgen","title":"Collate Lymphgen. — collate_lymphgen","text":"Expand sample_table (metadata) horizontally different flavours lymphgen data.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_lymphgen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate Lymphgen. — collate_lymphgen","text":"","code":"collate_lymphgen(   these_samples_metadata,   lymphgen_version = \"default\",   tidy = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_lymphgen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate Lymphgen. — collate_lymphgen","text":"these_samples_metadata Optional parameter metadata filtered sample_ids interest. provided, function join lymphgen metadata, regardless tidy TRUE/FALSE. lymphgen_version Version selected lymphgen, default \"default\". tidy Boolean parameter, set TRUE tidy format (.e long format columns dropped). Default FALSE, returns data wide format, keeping original Subtype. Prediction tidied LymphGen values puts values \"flavour\" column.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_lymphgen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate Lymphgen. — collate_lymphgen","text":"df lymphgen information.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_lymphgen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collate Lymphgen. — collate_lymphgen","text":"function takes sample table (metadata) adds different flavours lymphgen data. possible call function already subset metadata table (sample IDs interest) these_samples_metadata. done, function join lymphgen data table. Currently, supported lymphgen_version \"default\". information refer function examples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_lymphgen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collate Lymphgen. — collate_lymphgen","text":"","code":"if (FALSE) { # \\dontrun{ this_meta = get_gambl_metadata() dlbcl_meta = dplyr::filter(this_meta, pathology == \"DLBCL\")  wide_lymphgen = collate_lymphgen(these_samples_metadata = dlbcl_meta,                                  lymphgen_version = \"default\",                                  tidy = FALSE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate Results — collate_results","title":"Collate Results — collate_results","text":"Bring together derived sample-level results many GAMBL pipelines.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate Results — collate_results","text":"","code":"collate_results(   sample_table,   write_to_file = FALSE,   join_with_full_metadata = FALSE,   these_samples_metadata,   case_set,   sbs_manipulation = \"\",   seq_type_filter = \"genome\",   from_cache = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate Results — collate_results","text":"sample_table data frame sample_id first column. write_to_file Boolean statement outputs tsv file (/projects/nhl_meta_analysis_scratch/gambl/results_local/shared/gambl_seq_type_filter_results.tsv) TRUE, default FALSE. join_with_full_metadata Join columns metadata, default FALSE. these_samples_metadata Optional argument use user specified metadata df, overwrites get_gambl_metadata join_with_full_metadata. case_set Optional short name pre-defined set cases. sbs_manipulation Optional variable transforming sbs values (e.g log, scale). seq_type_filter Filtering criteria, default genomes. from_cache Boolean variable using cached results (/projects/nhl_meta_analysis_scratch/gambl/results_local/shared/gambl_seq_type_filter_results.tsv), default TRUE. write_to_file TRUE, parameter auto-defaults FALSE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate Results — collate_results","text":"table keyed biopsy_id contains bunch per-sample results GAMBL","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collate Results — collate_results","text":"function takes data frame sample IDs (first column) sample_table parameter adds sample-level results many available GAMBL pipelines. Optional parameters these_samples_metadata join_with_full_metadata. join_with_full_metadata set TRUE, function can either work already subset metadata table (these_sampels_metadata), , provided, function default metadata returned get_gambl_metadata, allowing user extend available information metadata table. function also designed can get cached results, meaning individual collate helper functions run get results back. , run function from_cache = TRUE (default). addition, also possible regenerate cached results, done setting write_to_file = TRUE, operation auto defaults from_cache = FALSE. case_set optional parameter available subsetting return already defined set cases. Lastly, seq_type_filter lets user control seq type results returned . Default \"genome\". information get function, refer function examples, vignettes parameter descriptions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/collate_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collate Results — collate_results","text":"","code":"if (FALSE) { # \\dontrun{ #get collated results for all capture samples, using cached results capture_collated_everything = collate_results(seq_type_filter = \"capture\",                                               from_cache = TRUE,                                               write_to_file = FALSE)  #use an already subset metadata table for getting collated results (cached) my_metadata = get_gambl_metadata() fl_metadata = dplyr::filter(my_metadata, pathology == \"FL\")  fl_collated = collate_results(seq_type_filter = \"genome\",                               join_with_full_metadata = TRUE,                               these_samples_metadata = fl_metadata,                               write_to_file = FALSE,                               from_cache = TRUE)  #get collated results for all genome samples and join with full metadata everything_collated = collate_results(seq_type_filter = \"genome\",                                       from_cache = TRUE,                                       join_with_full_metadata = TRUE)  #another example demonstrating correct usage of the sample_table parameter. fl_samples = dplyr::select(fl_metadata, sample_id, patient_id, biopsy_id)  fl_collated = collate_results(sample_table = fl_samples,                               seq_type_filter = \"genome\",                               from_cache = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/consolidate_lymphgen.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate Lymphgen. — consolidate_lymphgen","title":"Consolidate Lymphgen. — consolidate_lymphgen","text":"Replace lymphgen column incoming metadata classification additional samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/consolidate_lymphgen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate Lymphgen. — consolidate_lymphgen","text":"","code":"consolidate_lymphgen(sample_table, derived_data_path = \"\", verbose = TRUE)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/consolidate_lymphgen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate Lymphgen. — consolidate_lymphgen","text":"sample_table Input data frame metadata. derived_data_path Optional argument specifying path folder files following pattern *lymphgen.txt. verbose Default TRUE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/consolidate_lymphgen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate Lymphgen. — consolidate_lymphgen","text":"data frame supplemented lymphGen column.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/consolidate_lymphgen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consolidate Lymphgen. — consolidate_lymphgen","text":"Supplement \"lymphgen\" column metadata classification additional samples. Expects least columns \"patient_id\" bind , \"lymphgen\" supplement data .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/consolidate_lymphgen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consolidate Lymphgen. — consolidate_lymphgen","text":"","code":"if (FALSE) { # \\dontrun{   metadata = get_gambl_metadata()   consolidate_lymphgen(sample_table = metadata) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/estimate_purity.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Purity. — estimate_purity","title":"Estimate Purity. — estimate_purity","text":"Annotate MAF segmented absolute copy number data added additional columns (VAF, Ploidy Final_purity).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/estimate_purity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Purity. — estimate_purity","text":"","code":"estimate_purity(   these_samples_metadata,   maf_data,   seg_data,   show_plots = FALSE,   assume_diploid = FALSE,   coding_only = FALSE,   projection,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/estimate_purity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Purity. — estimate_purity","text":"these_samples_metadata Metadata one sample maf_data Optional. Instead using path maf file, use local dataframe maf file. seg_data Data frame seg_data object sample interest. Can contain data samples, ignored. show_plots Optional. Show two faceted plots display VAF purity distributions copy number state sample. Default FALSE. assume_diploid Optional. local seg file provided, instead defaulting GAMBL sample, parameter annotates every mutation copy neutral. Default FALSE. coding_only Optional. set TRUE restrict coding variants. Default FALSE. in_maf Path local maf file. in_seg Path local corresponding seg file sample ID input maf. this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". verbose. Set TRUE feedback.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/estimate_purity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Purity. — estimate_purity","text":"list containing data frame (MAF-like format) segmented absolute copy number data three extra columns: VAF variant allele frequency calculated t_ref_count t_alt_count Ploidy number copies allele tumour cell Final_purity finalized purity estimation per mutation considering different copy number states LOH events.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/estimate_purity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Purity. — estimate_purity","text":"function takes single row metadata defines sample wish estimate purity . user can also use already loaded maf file maf_df. addition, path maf/seq file interest can also passed function in_maf in_seg. visualize VAF purity distributions, set show_plots TRUE (default FALSE). information run function parameters hand, refer parameter descriptions function examples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/estimate_purity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Purity. — estimate_purity","text":"","code":"# get metadata for one sample  my_meta = suppressMessages(get_gambl_metadata()) %>%    dplyr::filter(sample_id == \"HTMCP-01-06-00422-01A-01D\",   seq_type == \"genome\")  #estimate purity, allowing the data to be retrieved for you outputs = estimate_purity(these = my_meta,                 show_plots = TRUE,                 projection  = \"grch37\") #> dummy segments are not annotated in the inputs #> fill_missing_with parameter will be ignored #> Running in default mode of any... outputs$sample_purity_estimation #> [1] 1"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/fetch_output_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Output Files. — fetch_output_files","title":"Fetch Output Files. — fetch_output_files","text":"Get output files set conditions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/fetch_output_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Output Files. — fetch_output_files","text":"","code":"fetch_output_files(   tool,   unix_group,   base_path,   results_dir = \"99-outputs\",   this_seq_type = \"genome\",   build = \"hg38\",   search_pattern = \"cellularity_ploidy.txt\" )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/fetch_output_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Output Files. — fetch_output_files","text":"tool Name tool. unix_group unix group sample set. base_path Either full relative path results directories tool e.g. \"gambl/sequenza_current\". results_dir Directory results. this_seq_type Either genome capture. build Default hg38. search_pattern File-extensions search pattern.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/fetch_output_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Output Files. — fetch_output_files","text":"data frame one row per file sample IDs parsed file name along GAMBL wildcards.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/fetch_output_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch Output Files. — fetch_output_files","text":"function lets user specify multiple conditions returning result subsets. First, specify name tool tool, set seq type (this_seq_type) either genome capture, together genome build (genome_build). data frame returned one row per file sample IDs together GAMBL wildcards.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/fetch_output_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Output Files. — fetch_output_files","text":"","code":"if (FALSE) { # \\dontrun{ ex_outs = fetch_output_files(tool = \"manta\",                              base_path = \"gambl/sequenza_current\",                              this_seq_type = \"capture\",                              build = \"hg38\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_expected_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Expected Outputs. — find_expected_outputs","title":"Find Expected Outputs. — find_expected_outputs","text":"Get details including file paths anticipated outputs pipeline tool.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_expected_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Expected Outputs. — find_expected_outputs","text":"","code":"find_expected_outputs(   targ_df,   tool_name,   unix_group,   filename_end_pattern,   update_db = FALSE,   target_path )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_expected_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Expected Outputs. — find_expected_outputs","text":"targ_df Optionally provide data frame file details. tool_name tool pipeline generated files (). Acceptable values manta gridss. unix_group unix group (). filename_end_pattern Optionally specify pattern search files among longer set files outputs. update_db Set TRUE overwrite existing rows table tool/unix_group combination. target_path Path targets.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_expected_outputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Expected Outputs. — find_expected_outputs","text":"function takes tool pipeline tool_name unix group unix_group returns information paths individual files. Optionally, user can provide already loaded data frame file details (targ_df). information examples, refer parameter descriptions well function examples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_expected_outputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Expected Outputs. — find_expected_outputs","text":"","code":"if (FALSE) { # \\dontrun{ #get paths to unmatched manta bedpe files ex_outs = find_expected_outputs(tool_name = \"manta\",                                unix_group = \"gambl\",                                filename_end_pattern = \"unmatched.somaticSV.bedpe\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_files_extract_wildcards.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Files Extract Wildcards — find_files_extract_wildcards","title":"Find Files Extract Wildcards — find_files_extract_wildcards","text":"Get wildcards set samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_files_extract_wildcards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Files Extract Wildcards — find_files_extract_wildcards","text":"","code":"find_files_extract_wildcards(   tool_results_path,   search_pattern,   genome_build,   seq_type = \"genome\",   unix_group = \"gambl\",   tool_name )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_files_extract_wildcards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Files Extract Wildcards — find_files_extract_wildcards","text":"tool_results_path Optional parameter, path results. search_pattern Search pattern. genome_build Genome projection used. seq_type Default genome. unix_group Default value gambl. tool_name Name tool.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_files_extract_wildcards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Files Extract Wildcards — find_files_extract_wildcards","text":"tibble wildcards.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_files_extract_wildcards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Files Extract Wildcards — find_files_extract_wildcards","text":"Specify file extension search_pattern seq type, unix group, genome build function return tibble sample wildcards.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/find_files_extract_wildcards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Files Extract Wildcards — find_files_extract_wildcards","text":"","code":"if (FALSE) { # \\dontrun{ file_details_manta = find_files_extract_wildcards(tool_name = \"manta\",                                                   genome_build = c(\"hg38\", \"grch37\"),                                                   search_pattern = \".bed\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_all_coding_ssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all Coding SSMs — get_all_coding_ssm","title":"Get all Coding SSMs — get_all_coding_ssm","text":"Retrieve coding SSMs GAMBL MAF-like format, regardless seq_type.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_all_coding_ssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all Coding SSMs — get_all_coding_ssm","text":"","code":"get_all_coding_ssm(these_samples_metadata = NULL, include_silent = FALSE, ...)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_all_coding_ssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all Coding SSMs — get_all_coding_ssm","text":"these_samples_metadata Supply metadata table containing sample/seq_type combinations want. include_silent set TRUE, silent/synonymous mutations coding regions also returned. ... Additional arguments passed get_coding_ssm","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_all_coding_ssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all Coding SSMs — get_all_coding_ssm","text":"data frame containing MAF data columns (one row per mutation).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_all_coding_ssm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all Coding SSMs — get_all_coding_ssm","text":"Effectively retrieve coding SSM calls one DNA seq_type. additional optional arguments, see get_coding_ssm","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_all_coding_ssm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all Coding SSMs — get_all_coding_ssm","text":"","code":"my_meta = suppressMessages(get_gambl_metadata()) maf_all_seqtype = get_all_coding_ssm(my_meta)  table(maf_all_seqtype$maf_seq_type) #>  #> capture  genome  #> 1214014  248643   # most common mutations by gene and Variant_Classification dplyr::group_by(maf_all_seqtype,Hugo_Symbol,Variant_Classification) %>%    dplyr::count() %>%    dplyr::arrange(desc(n)) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>    Hugo_Symbol Variant_Classification    n #> 1      IGLV3-1      Missense_Mutation 2952 #> 2     IGHV2-70      Missense_Mutation 2787 #> 3          TTN      Missense_Mutation 2474 #> 4         BCL2      Missense_Mutation 2120 #> 5         BCL2                 Silent 2120 #> 6        IGLL5      Missense_Mutation 1888 #> 7     IGHV1-69      Missense_Mutation 1570 #> 8         PIM1      Missense_Mutation 1180 #> 9        MUC16      Missense_Mutation 1172 #> 10       IGLL5                 Silent 1135"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ashm_count_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ASHM Count Matrix. — get_ashm_count_matrix","title":"Get ASHM Count Matrix. — get_ashm_count_matrix","text":"Prepare matrix one row per sample one column per region using set hypermutated regions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ashm_count_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ASHM Count Matrix. — get_ashm_count_matrix","text":"","code":"get_ashm_count_matrix(   regions_bed,   maf_data,   these_samples_metadata,   this_seq_type = \"genome\",   projection )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ashm_count_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ASHM Count Matrix. — get_ashm_count_matrix","text":"regions_bed bed file one row region. first three columns file MUST contain Chromosome, Start End position maf_data Optionally provide data frame MAF format, otherwise either GAMBLR.data GAMBLR.results used. these_samples_metadata used complete matrix. GAMBL samples specified seq_type used default. Provide data frame least sample_id samples using non-GAMBL data. this_seq_type seq_type return results . Must single value. used metadata provided these_samples_metadata. projection genome build working ","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ashm_count_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ASHM Count Matrix. — get_ashm_count_matrix","text":"data frame row every sample these_samples_metadata column every region regions_bed","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ashm_count_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get ASHM Count Matrix. — get_ashm_count_matrix","text":"Values number mutations patient region.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ashm_count_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ASHM Count Matrix. — get_ashm_count_matrix","text":"","code":"DLBCL_genome_meta = get_gambl_metadata() %>%      dplyr::filter(pathology==\"DLBCL\") #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! #get ashm regions some_regions = GAMBLR.utils::create_bed_data(                               GAMBLR.data::grch37_ashm_regions,                               fix_names = \"concat\",                               concat_cols = c(\"gene\",\"region\"),                               sep=\"-\") %>%   dplyr::filter(grepl(\"PAX5\",name))  pax5_matrix <- get_ashm_count_matrix(      regions_bed = some_regions,      this_seq_type = \"genome\",      these_samples_metadata = DLBCL_genome_meta ) #> Streamlined is set to TRUE, this function will disregard anything specified with basic_columns #> To return a MAF with standard 45 columns, set streamlioned = FALSE and basic_columns = TRUE #> To return a maf with all (116) columns, set streamlined = FALSE and basic_columns = FALSE #> Joining with `by = join_by(sample_id, region_name)` head(pax5_matrix) #>                   PAX5-TSS-1 PAX5-distal-enhancer-1 PAX5-distal-enhancer-3 #> 00-14595_tumorC            2                      4                      3 #> 00-15201_tumorA            0                      0                      3 #> 00-15201_tumorB            0                      0                      0 #> 00-17960_CLC01670          0                      0                      0 #> FL1015T2                   0                      1                      0 #> 00-23442_tumorB            0                      0                      2 #>                   PAX5-intron-1 PAX5-distal-enhancer-2 #> 00-14595_tumorC              12                      0 #> 00-15201_tumorA               7                      0 #> 00-15201_tumorB               1                      0 #> 00-17960_CLC01670            11                      2 #> FL1015T2                      0                      0 #> 00-23442_tumorB               0                      0 colMeans(pax5_matrix) #>             PAX5-TSS-1 PAX5-distal-enhancer-1 PAX5-distal-enhancer-3  #>              0.4402619              0.5319149              1.2487725  #>          PAX5-intron-1 PAX5-distal-enhancer-2  #>              1.9247136              0.6579378"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_bams.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BAMs. — get_bams","title":"Get BAMs. — get_bams","text":"Get full paths bam files sample patient.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_bams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BAMs. — get_bams","text":"","code":"get_bams(this_sample_id, this_patient_id)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_bams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BAMs. — get_bams","text":"this_sample_id Sample ID interest. this_patient_id patient ID interest.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_bams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BAMs. — get_bams","text":"list contains genome_build igv-friendly build (igv_build), list bam file paths tumour, normal mrna data.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_bams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get BAMs. — get_bams","text":"Returns list BAM paths tumour, normal mrna data. function expects sample ID (this_sample_id) patient ID (this_patient_id).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_bams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BAMs. — get_bams","text":"","code":"if (FALSE) { # \\dontrun{ #example 1, using a sample ID bam_details = get_bams(this_sample_id = \"HTMCP-01-06-00422-01A-01D\")  #example 2, using a patient ID bam_details = get_bams(this_patient_id = \"HTMCP-01-06-00422\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CN Segments. — get_cn_segments","title":"Get CN Segments. — get_cn_segments","text":"Retrieve copy number segments GAMBL outputs","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CN Segments. — get_cn_segments","text":"","code":"get_cn_segments(   these_samples_metadata,   projection = \"grch37\",   flavour = \"combined\",   this_seq_type,   fill_missing_with = \"nothing\",   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CN Segments. — get_cn_segments","text":"these_samples_metadata User must provide metadata table restrict data samples table. metadata also ensures proper handling duplicate sample_id across seq_types ensures seq_type metadata faithfully represents seq_type data projection Desired genome coordinate system returned CN segments. Default \"grch37\". flavour Specify pipeline source data use. Available options \"combined\" \"battenberg\". Battenberg outputs incomplete. this_seq_type Deprecated. fill_missing_with Specify fill values dummy segments created satisfy GISTIC. default \"nothing\", causes dropped empty regions can handled subsequent processing steps. creating GISTIC input, typically want set \"avg_ploidy\". taken care GAMBLR.utils::prepare_gistic_inputs verbose Set TRUE chattier experience","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CN Segments. — get_cn_segments","text":"data frame CN segments specified region.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_segments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CN Segments. — get_cn_segments","text":"merely loads returns seg_data available projection (genome build) can assign single value dummy segments present/identified source file","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_segments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CN Segments. — get_cn_segments","text":"","code":"# Example for just exome/capture samples: # Get metadata for just a few capture samples capture_metadata <- suppressMessages(get_gambl_metadata()) %>%   dplyr::filter(seq_type == \"capture\") %>%   head()  # Load the copy number segments for capture samples using hg38 projection capture_segments_hg38 <- get_cn_segments(   these_samples_metadata = capture_metadata,   projection = \"hg38\" ) #> dummy segments are not annotated in the inputs #> fill_missing_with parameter will be ignored print(capture_segments_hg38) #> SEG Data Object #> Genome Build: hg38  #> Showing first 10 rows: #>                 ID chrom    start      end LOH_flag log.ratio seg_seq_type #> 1  00-22011_tumorB  chr1    10001    69372       NA    0.0000      capture #> 2  00-22011_tumorB  chr1    69373 10335564       NA    1.0000      capture #> 3  00-22011_tumorB  chr1 10335564 12723042       NA    0.0000      capture #> 4  00-22011_tumorB  chr1 12723043 13184564       NA    0.0000      capture #> 5  00-22011_tumorB  chr1 13184565 33302847       NA    0.0000      capture #> 6  00-22011_tumorB  chr1 33302847 33309697       NA    2.5453      capture #> 7  00-22011_tumorB  chr1 33309697 40850005       NA    0.0000      capture #> 8  00-22011_tumorB  chr1 40850005 40922631       NA    2.8912      capture #> 9  00-22011_tumorB  chr1 40922631 47396477       NA    0.0000      capture #> 10 00-22011_tumorB  chr1 47396477 47439416       NA    2.0000      capture #>          CN #> 1   2.00000 #> 2   4.00000 #> 3   2.00000 #> 4   2.00000 #> 5   2.00000 #> 6  11.67459 #> 7   2.00000 #> 8  14.83775 #> 9   2.00000 #> 10  8.00000  genome_metadata <- suppressMessages(get_gambl_metadata()) %>%   dplyr::filter(seq_type == \"genome\") %>%   head() # Create a metadata table with a mix of seq_types mixed_seq_type_meta <- dplyr::bind_rows(capture_metadata, genome_metadata) ## We can load the copy number segments for all samples across seq_types capture_segments_default <- get_cn_segments(   these_samples_metadata = mixed_seq_type_meta ) #> dummy segments are not annotated in the inputs #> fill_missing_with parameter will be ignored dplyr::group_by(capture_segments_default, ID) %>%   dplyr::summarize(n = dplyr::n()) #> # A tibble: 12 × 2 #>    ID                    n #>    <chr>             <int> #>  1 00-12637_CLC02086   116 #>  2 00-14595_tumorB     144 #>  3 00-14595_tumorC     166 #>  4 00-14595_tumorD     142 #>  5 00-22011_tumorB     598 #>  6 FL1011T1          22548 #>  7 FL1011T2            134 #>  8 PA003               225 #>  9 PA007               297 #> 10 PA065              3903 #> 11 PA081               200 #> 12 PTCL002_tumour      195 # Note the default projection is \"grch37\" print(capture_segments_default) #> SEG Data Object #> Genome Build: grch37  #> Showing first 10 rows: #>                 ID chrom    start      end LOH_flag log.ratio seg_seq_type #> 1  00-22011_tumorB     1    10001    69372       NA    0.0000      capture #> 2  00-22011_tumorB     1    69373 10395622       NA    1.0000      capture #> 3  00-22011_tumorB     1 10395622 12783034       NA    0.0000      capture #> 4  00-22011_tumorB     1 12783034 13292951       NA   -2.0000      capture #> 5  00-22011_tumorB     1 13292951 33768448       NA    0.0000      capture #> 6  00-22011_tumorB     1 33768448 33775298       NA    2.5453      capture #> 7  00-22011_tumorB     1 33775298 41315677       NA    0.0000      capture #> 8  00-22011_tumorB     1 41315677 41388303       NA    2.8912      capture #> 9  00-22011_tumorB     1 41388303 47862149       NA    0.0000      capture #> 10 00-22011_tumorB     1 47862149 47905088       NA    2.0000      capture #>          CN #> 1   2.00000 #> 2   4.00000 #> 3   2.00000 #> 4   0.50000 #> 5   2.00000 #> 6  11.67459 #> 7   2.00000 #> 8  14.83775 #> 9   2.00000 #> 10  8.00000"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CN States. — get_cn_states","title":"Get CN States. — get_cn_states","text":"Get copy number matrix samples based segmented data database. function deprecated replaced GAMBLR.utils::segmented_data_to_cn_matrix GAMBLR.results::get_cn_segments","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CN States. — get_cn_states","text":"","code":"get_cn_states()"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CN States. — get_cn_states","text":"Copy number matrix sample_id rows regions columns.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CN States. — get_cn_states","text":"function returns CN states specified regions using CN data GAMBLR.results (optionally) assumes regions data diploid. determine/specify coordinates region, refer parameter descriptions examples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cn_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CN States. — get_cn_states","text":"","code":"if (FALSE) { # \\dontrun{   get_cnv_and_ssm_status() } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cnv_and_ssm_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","title":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","text":"specified chromosome region (gene name), return status 1 copy number (CN) state non-neutral, .e. different 2, region contains coding simple somatic mutation (SSM).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cnv_and_ssm_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","text":"","code":"get_cnv_and_ssm_status(   genes_and_cn_threshs,   these_samples_metadata,   maf_df,   seg_data,   cn_matrix,   only_cnv = \"none\",   genome_build = \"grch37\",   include_hotspots = TRUE,   review_hotspots = TRUE,   adjust_for_ploidy = TRUE,   include_silent = FALSE,   this_seq_type,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cnv_and_ssm_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","text":"genes_and_cn_threshs data frame columns \"gene_id\" \"cn_thresh\". \"gene_id\" column stores gene symbols (characters) determine regions return CNV /coding SSM status. \"cn_thresh\" column stores integers mean maximum minimum CN states return status 1 (contains CNV) respective gene. integer 2 (neutral CN state diploids), taken maximum (gene consider tumor suppressor); 2, minimum (oncogene); equal 2, consider CNV return status. these_samples_metadata metadata samples interest included returned matrix. Can created get_gambl_metadata function. maf_df Optional data frame containing coding variants samples (.e. output get_all_coding_ssm) seg_data Optionally provide function data frame segments used instead GAMBL flatfiles cn_matrix Instead seg_data, can provide matrix CN values samples metadata. See GAMBLR.utils::segmented_data_to_cn_matrix information create matrix. only_cnv vector gene names indicating genes CNV status considered, ignoring SSM status. Set argument \"\" \"none\" (default) apply behavior none genes, respectively. genome_build Reference genome build. Possible values \"grch37\" (default) \"hg38\". include_hotspots Logical parameter indicating whether hotspots object also tabulated. Default TRUE. review_hotspots Logical parameter indicating whether hotspots object reviewed include functionally relevant mutations rare lymphoma-related genes. Default TRUE. adjust_for_ploidy Set FALSE disable scaling CN values genome-wide average per sample include_silent Set TRUE want Synonymous mutations also considered this_seq_type Deprecated verbose. Set TRUE text","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cnv_and_ssm_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","text":"data frame CNV SSM combined status.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cnv_and_ssm_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","text":"user can choose regions intended return copy number variation (CNV) status, coding SSM status, least presence one . behavior controlled arguments genes_and_cn_threshs (column cn_thresh) only_cnv. function internally calls get_cn_states, get_ssm_by_samples get_coding_ssm_statusfunctions. Therefore, many arguments assigned functions. needed, see documentation functions information. case returning NA values, due get_cn_segments function able internally return copy number segments specified chromosome region.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_cnv_and_ssm_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CNV and coding SSM combined status — get_cnv_and_ssm_status","text":"","code":"# Get sample metadata including a mix of seq_type all_types_meta = suppressMessages(get_gambl_metadata()) %>%              dplyr::filter(pathology == \"BL\") dplyr::group_by(all_types_meta, seq_type) %>%       dplyr::summarize(n=dplyr::n()) #> # A tibble: 3 × 2 #>   seq_type     n #>   <chr>    <int> #> 1 capture    174 #> 2 genome     259 #> 3 mrna       279  # For MYC and SYNCRIP, return CNV and SSM combined status; for MIR17HG,  # return only CNV status; for CCND3 return only SSM status genes_and_cn_threshs = data.frame(   gene_id=c(\"MYC\", \"MIR17HG\", \"CCND3\",\"ID3\",\"DDX3X\", \"SYNCRIP\"),   cn_thresh=c(3, 3, 2, 2, 2, 1) )  genome_cnv_ssm_status = suppressMessages(get_cnv_and_ssm_status(                            genes_and_cn_threshs,                            dplyr::filter(all_types_meta,seq_type==\"genome\"),                            only_cnv = \"MIR17HG\"))  print(dim(genome_cnv_ssm_status))     #> [1] 259   6 head(genome_cnv_ssm_status)    #>                           MYC MIR17HG CCND3 ID3 DDX3X SYNCRIP #> BLGSP-71-06-00001-01A-11D   0       0     1   1     1       0 #> BLGSP-71-06-00002-01C-01D   1       0     0   1     0       0 #> BLGSP-71-06-00004-01A-11D   0       0     1   1     1       0 #> BLGSP-71-06-00005-01A-21D   0       0     1   1     0       0 #> BLGSP-71-06-00007-01A-11D   1       0     1   1     0       0 #> BLGSP-71-06-00008-01A-11D   0       0     0   0     0       0 colSums(genome_cnv_ssm_status) #>     MYC MIR17HG   CCND3     ID3   DDX3X SYNCRIP  #>     187      47      76     120     122      14                       all_seq_type_status = suppressMessages(get_cnv_and_ssm_status(                            genes_and_cn_threshs,                            all_types_meta,                            only_cnv = \"MIR17HG\"))  print(dim(all_seq_type_status))    #> [1] 433   6 head(all_seq_type_status) #>                           MYC MIR17HG CCND3 ID3 DDX3X SYNCRIP #> BLGSP-71-06-00001-01A-11D   0       0     1   1     1       0 #> BLGSP-71-06-00002-01C-01D   1       0     0   1     0       0 #> BLGSP-71-06-00004-01A-11D   0       0     1   1     1       0 #> BLGSP-71-06-00005-01A-21D   0       0     1   1     0       0 #> BLGSP-71-06-00007-01A-11D   1       0     1   1     0       0 #> BLGSP-71-06-00008-01A-11D   0       0     0   0     0       0 colSums(all_seq_type_status) #>     MYC MIR17HG   CCND3     ID3   DDX3X SYNCRIP  #>     288      68     120     197     192      26"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Coding SSM. — get_coding_ssm","title":"Get Coding SSM. — get_coding_ssm","text":"Retrieve coding SSMs one seq_type GAMBL MAF-like format.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Coding SSM. — get_coding_ssm","text":"","code":"get_coding_ssm(   these_samples_metadata = NULL,   force_unmatched_samples,   projection = \"grch37\",   this_seq_type = \"genome\",   basic_columns = TRUE,   maf_cols = NULL,   augmented = TRUE,   min_read_support = 3,   groups = c(\"gambl\", \"icgc_dart\"),   include_silent = TRUE,   engine,   verbose = FALSE,   limit_cohort,   exclude_cohort,   limit_pathology,   limit_samples,   from_flatfile,   these_sample_ids )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Coding SSM. — get_coding_ssm","text":"these_samples_metadata Optional (highly recommended) metadata table tell function subset data. sample_id table matching seq_type output. samples may output, though, missing SSM results mutations detected. force_unmatched_samples Optional argument forcing unmatched samples, using get_ssm_by_samples. projection Reference genome build coordinates MAF file. default grch37. this_seq_type seq_type want SSMs , default genome. basic_columns Basic columns refers first 45 standard MAF columns. Set FALSE want available columns instead. maf_cols basic_columns set FALSE, user can specify columns returned within MAF. parameter can either vector indexes (integer) vector characters (matching columns MAF). augmented Set FALSE instead want original MAF sample multi-sample patients instead augmented MAF min_read_support returns variants least many reads t_alt_count (cleaning augmented MAFs) groups Deprecated. Use these_samples_metadata instead. include_silent Logical indicating whether include silent mutations coding regions (.e. synonymous). Default TRUE. engine Deprecated. Ignored verbose Controls \"verboseness\" function (internally called helpers). limit_cohort Deprecated. Use these_samples_metadata instead. exclude_cohort Deprecated. Use these_samples_metadata instead. limit_pathology Deprecated. Use these_samples_metadata instead. limit_samples Deprecated. Use these_samples_metadata instead. from_flatfile Deprecated. Ignored these_sample_ids Deprecated. Use these_samples_metadata instead.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Coding SSM. — get_coding_ssm","text":"data frame containing MAF data columns (one row per mutation).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Coding SSM. — get_coding_ssm","text":"Effectively retrieve simple somatic mutations (SSM) results either capture genome seq_type (). resulting data frame maf_data object, tracks genome build (projection) variants maf_seq_type column tracks origin seq_type variant. cases, users using related function able obtain SSMs across genome capture seq_type: get_all_coding_ssm function looking ? Try one : get_coding_ssm_status, get_ssm_by_patients, get_ssm_by_sample, get_ssm_by_samples, get_ssm_by_region, get_ssm_by_regions","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Coding SSM. — get_coding_ssm","text":"","code":"#basic usage (defaults to genome seq_type)   maf_genome = get_coding_ssm() #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat)    nrow(maf_genome) #> [1] 248754    dplyr::select(maf_genome,1,4,5,6,9,maf_seq_type) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>      Hugo_Symbol NCBI_Build Chromosome Start_Position Variant_Classification #> 1     AL627309.1     GRCh37          1         138626                 Silent #> 2     AL627309.1     GRCh37          1         138972        Frame_Shift_Ins #> 3  RP11-206L10.9     GRCh37          1         730845          Splice_Region #> 4         FAM87B     GRCh37          1         753589          Splice_Region #> 5         SAMD11     GRCh37          1         871158                 Silent #> 6         SAMD11     GRCh37          1         871192      Missense_Mutation #> 7         SAMD11     GRCh37          1         874416          Splice_Region #> 8         SAMD11     GRCh37          1         874467      Missense_Mutation #> 9         SAMD11     GRCh37          1         874648          Splice_Region #> 10        SAMD11     GRCh37          1         874763      Missense_Mutation #>    maf_seq_type #> 1        genome #> 2        genome #> 3        genome #> 4        genome #> 5        genome #> 6        genome #> 7        genome #> 8        genome #> 9        genome #> 10       genome    maf_exome_hg38 = get_coding_ssm(this_seq_type = \"capture\",                                   projection=\"hg38\")  #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat)    dplyr::select(maf_exome_hg38,1,4,5,6,9,maf_seq_type) #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>    Hugo_Symbol NCBI_Build Chromosome Start_Position Variant_Classification #> 1        OR4F5     GRCh38       chr1          69634      Missense_Mutation #> 2        OR4F5     GRCh38       chr1          69644      Missense_Mutation #> 3   FO538757.2     GRCh38       chr1         183189      Missense_Mutation #> 4   FO538757.2     GRCh38       chr1         183937      Missense_Mutation #> 5   FO538757.1     GRCh38       chr1         186356      Nonsense_Mutation #> 6   FO538757.1     GRCh38       chr1         186385      Missense_Mutation #> 7   FO538757.1     GRCh38       chr1         186404      Missense_Mutation #> 8   FO538757.1     GRCh38       chr1         186440      Missense_Mutation #> 9   FO538757.1     GRCh38       chr1         186440      Missense_Mutation #> 10  FO538757.1     GRCh38       chr1         186475          Splice_Region #>    maf_seq_type #> 1       capture #> 2       capture #> 3       capture #> 4       capture #> 5       capture #> 6       capture #> 7       capture #> 8       capture #> 9       capture #> 10      capture"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Coding SSM Status. — get_coding_ssm_status","title":"Get Coding SSM Status. — get_coding_ssm_status","text":"Tabulate mutation status (SSM) set genes.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Coding SSM Status. — get_coding_ssm_status","text":"","code":"get_coding_ssm_status(   gene_symbols,   these_samples_metadata,   augmented = TRUE,   min_read_support = 3,   maf_path = NULL,   maf_data,   include_hotspots = TRUE,   keep_multihit_hotspot = FALSE,   recurrence_min = 5,   review_hotspots = TRUE,   genes_of_interest = c(\"FOXO1\", \"MYD88\", \"CREBBP\"),   genome_build,   include_silent = FALSE,   include_silent_genes,   suffix,   this_seq_type )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Coding SSM Status. — get_coding_ssm_status","text":"gene_symbols vector gene symbols mutation status tabulated. provided, lymphoma genes returned default. these_samples_metadata metadata samples interest included returned matrix. column \"sample_id\" required. provided, matrix tabulated available samples default. augmented default: TRUE. Set FALSE instead want original MAF sample multi-sample patients instead augmented MAF. min_read_support returns variants least many reads t_alt_count (cleaning augmented MAFs). maf_path status coding SSM tabulated custom maf file, provide path maf argument. default set NULL. maf_data Either maf loaded disk database using get_ssm function. include_hotspots Logical parameter indicating whether hotspots object also tabulated. Default TRUE. keep_multihit_hotspot Logical parameter indicating whether keep gene annotation mutated gene hot spot non-hotspot mutation. Default FALSE. set TRUE, report number non-hotspot mutations instead tabulating just mutation presence. recurrence_min Integer value indicating minimal recurrence level. review_hotspots Logical parameter indicating whether hotspots object reviewed include functionally relevant mutations rare lymphoma-related genes. Default TRUE. genes_of_interest vector genes hotspot review. Currently FOXO1, MYD88, CREBBP supported. genome_build Reference genome build coordinates MAF file. default hg19 genome build. include_silent Logical parameter indicating whether include silent mutations coding mutations. Default FALSE. include_silent_genes Optionally, provide list genes Silent variants considered. provided, Silent variants genes included regardless include_silent argument. suffix Optionally provide character appended end name this_seq_type Deprecated. now determined metadata provided. projection Specify projection (grch37 hg38) mutations. Default grch37.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Coding SSM Status. — get_coding_ssm_status","text":"data frame tabulated mutation status.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Coding SSM Status. — get_coding_ssm_status","text":"function takes data frame (MAF-like format) converts binary one-hot encoded matrix mutation status either set user-specified genes (via gene_symbols) , genes provided, default lymphoma genes. default behaviour assign gene/sample_id combination mutated protein coding mutation sample MAF can configured use synonymous variants (via include_silent_genes) (via include_silent) genes. function also filtering convenience parameters giving user full control return. information, refer parameter descriptions examples. function looking ? Try one following, similar, functions; get_coding_ssm, get_ssm_by_patients, get_ssm_by_sample, get_ssm_by_samples, get_ssm_by_region, get_ssm_by_regions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_coding_ssm_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Coding SSM Status. — get_coding_ssm_status","text":"","code":"# FL Tier 1 genes genes = dplyr::filter(GAMBLR.data::lymphoma_genes,              FL_Tier==1) %>%               dplyr::pull(Gene)  # Metadata for FL genomes and exomes fl_meta = suppressMessages(get_gambl_metadata()) %>%      dplyr::filter(pathology==\"FL\",                   cohort != \"FL_Crouch\",                   seq_type != \"mrna\")  table(fl_meta$seq_type) #>  #> capture  genome  #>     333     463  # Here, we let the function load the data for us  coding_tabulated_df = get_coding_ssm_status(   gene_symbols=genes,   include_hotspots=FALSE,   genome_build = \"hg38\",   these_samples_metadata = fl_meta  ) #> Joining with `by = join_by(sample_id)`  length(genes) #> [1] 54  dim(coding_tabulated_df) #> [1] 796  55  head(colnames(coding_tabulated_df)) #> [1] \"sample_id\" \"TNFRSF14\"  \"ARID1A\"    \"RRAGC\"     \"BCL10\"     \"CTSS\"       # Alternatively, we can provide the MAF data directly  # Load the MAF data (let's use the other genome build this time)  maf_data = get_all_coding_ssm(these_samples_metadata = fl_meta,                               projection = \"grch37\")  coding_tabulated2 = get_coding_ssm_status(gene_symbols=genes,                                           these_samples_metadata = fl_meta,                                           maf_data = maf_data,                                           include_hotspots=FALSE) #> Joining with `by = join_by(sample_id)`  dim(coding_tabulated2) #> [1] 796  55  head(colnames(coding_tabulated2)) #> [1] \"sample_id\" \"TNFRSF14\"  \"ARID1A\"    \"RRAGC\"     \"BCL10\"     \"CTSS\""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_combined_sv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Combined SV. — get_combined_sv","title":"Get Combined SV. — get_combined_sv","text":"Retrieve Combined Manta GRIDSS-derived SVs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_combined_sv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Combined SV. — get_combined_sv","text":"","code":"get_combined_sv(   these_samples_metadata,   projection = \"grch37\",   oncogenes,   region,   min_vaf = 0,   these_sample_ids )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_combined_sv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Combined SV. — get_combined_sv","text":"these_samples_metadata GAMBL metadata frame containing samples want returned projection projection genome build. Default \"grch37\". oncogenes character vector genes commonly involved translocations. region Optional, region formatted like chrX:1234-5678 (chromosome can prefixed prefixed) instead specifying chromosome, start end separately. min_vaf minimum tumour VAF SV returned. Recommended: 0. (default: 0) these_sample_ids DEPRECATED may want include one e.g.: c(\"CCND1\", \"BCL2\",\"MYC\") NOTE: looking SV affecting oncogenes likely going want pass full output GAMBLR.utils::annotate_sv","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_combined_sv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Combined SV. — get_combined_sv","text":"data frame bedpe-like format additional columns allow filtering high-confidence SVs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_combined_sv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Combined SV. — get_combined_sv","text":"bedpe files function loads pre-filtered minimum VAF 0.05, SVs affecting common translocation regions (BCL2, BCL6, MYC, CCND1) whitelisted (e.g. VAF filter applied). Therefore wish post-filter SVs recommend needed. , input bedpe file annotated oncogenes superenhancers naive germinal centre B-cells. can subset events affecting certain loci using \"oncogenes\" argument. Try one following, similar, functions; get_manta_sv","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_combined_sv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Combined SV. — get_combined_sv","text":"","code":"# lazily get every SV in the table with default quality filters all_sv <- get_combined_sv() dplyr::select(all_sv,1:14) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>    CHROM_A START_A END_A CHROM_B   START_B     END_B #> 1        1    9894 10014      16     69889     69998 #> 2        1   10173 10984      12     94748     95533 #> 3        1   10176 10711      11 134946192 134946783 #> 4        1   10269 10794      16     59726     60283 #> 5        1   10285 10286       8 146301390 146301391 #> 6        1   10287 10688      15 102521012 102521550 #> 7        1   10308 10837      12     95037     95505 #> 8        1   10347 10631      15 102520227 102520677 #> 9        1   10437 10438       8 146301390 146301391 #> 10       1   10437 10438       8 146301390 146301391 #>                       manta_name SCORE STRAND_A STRAND_B tumour_sample_id #> 1  MantaBND:10:1901:1907:0:0:0:1    NA        -        +  00-14595_tumorD #> 2   MantaBND:1:5198:6695:0:0:0:1    NA        +        +         CLC03470 #> 3  MantaBND:23:3075:4071:0:0:0:1    NA        +        +        14-14094T #> 4   MantaBND:3:3538:3557:0:0:0:1    NA        +        -        07-13339T #> 5   MantaBND:5:1923:1927:0:0:0:1    NA        +        +        09-41114T #> 6     MantaBND:13192:0:1:0:0:0:0    NA        +        +      835-02-03TD #> 7   MantaBND:1:6049:6050:1:0:0:0    NA        +        +     4687-03-01BD #> 8  MantaBND:11:3940:4135:0:0:0:1    NA        -        -        12-34927T #> 9   MantaBND:2:7221:7224:0:1:0:1    NA        +        +      102-01-01TD #> 10  MantaBND:2:1723:1728:0:0:0:0    NA        +        +    102-0202-1DVT #>    normal_sample_id VAF_tumour  DP #> 1   00-14595_normal      0.400  10 #> 2         14-11247N      0.136  44 #> 3         14-11247N      0.186  59 #> 4         14-11247N      0.175  40 #> 5         14-11247N      0.118 110 #> 6    14-11247Normal      0.312  32 #> 7    14-11247Normal      0.250  52 #> 8         14-11247N      0.135 104 #> 9    14-11247Normal      0.520  25 #> 10   14-11247Normal      0.630  27  # get all SVs for just one cohort cohort_meta = suppressMessages(get_gambl_metadata()) %>%                dplyr::filter(cohort == \"DLBCL_cell_lines\")  some_sv <- get_combined_sv(these_samples_metadata = cohort_meta) dplyr::select(some_sv,1:14) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>    CHROM_A  START_A    END_A CHROM_B   START_B     END_B #> 1        1  1346152  1346155       1 111802594 111802597 #> 2        1  1739478  1739484       1   1770671   1770677 #> 3        1  1826839  1826841       1   1833712   1833714 #> 4        1  1827338  1827339       1   8741628   8741629 #> 5        1  2317295  2317296       1  16648172  16648173 #> 6        1  4472986  4472989       1   6530057   6530060 #> 7        1  6290197  6290198       1  16693372  16693373 #> 8        1  6438168  6438173       1   6445895   6445900 #> 9        1  6438168  6438173       1   6445895   6445900 #> 10       1 10005435 10005437       4  28617083  28617085 #>                             manta_name SCORE STRAND_A STRAND_B tumour_sample_id #> 1           MantaBND:14352:0:1:0:0:0:1    NA        +        +            HBL-1 #> 2  MantaDUP:TANDEM:14103:0:1:0:0:0_bp1    NA        -        +         OCI-Ly10 #> 3           MantaBND:14359:0:1:0:0:0:1    NA        +        +         SU-DHL-4 #> 4           MantaBND:14359:0:2:0:0:0:0    NA        -        -         SU-DHL-4 #> 5           MantaBND:12526:0:1:0:0:0:1    NA        +        +         SU-DHL-6 #> 6         MantaDEL:15336:0:1:0:1:0_bp1    NA        +        -         SU-DHL-5 #> 7           MantaBND:12875:0:1:0:0:0:0    NA        -        -         SU-DHL-6 #> 8         MantaDEL:16045:0:1:0:0:0_bp1    NA        +        -               HT #> 9         MantaDEL:15520:0:1:0:0:0_bp1    NA        +        -         SU-DHL-5 #> 10          MantaBND:15925:0:1:0:0:0:0    NA        -        -          WSU-NHL #>    normal_sample_id VAF_tumour  DP #> 1         14-11247N      0.189  95 #> 2         14-11247N      0.193 119 #> 3         14-11247N      0.213  94 #> 4         14-11247N      0.300  80 #> 5         14-11247N      0.323  62 #> 6         14-11247N      0.345 113 #> 7         14-11247N      0.234  77 #> 8         14-11247N      0.247  81 #> 9         14-11247N      1.000  30 #> 10        14-11247N      0.176  91 nrow(some_sv) #> [1] 3519  # get the SVs in a region around MYC # WARNING: This is not the best way to find MYC SVs. # Use annotate_sv on the full SV set instead. myc_region_hg38 = \"chr8:127710883-127761821\" myc_region_grch37 = \"8:128723128-128774067\"  hg38_myc_locus_sv <- get_combined_sv(region = myc_region_hg38,                                 projection = \"hg38\") dplyr::select(hg38_myc_locus_sv,1:14) #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>    CHROM_A   START_A     END_A CHROM_B   START_B     END_B #> 1     chr1   6803016   6803030    chr8 127731317 127731331 #> 2     chr1   8253139   8253144    chr8 127756470 127756475 #> 3     chr1  50392925  50392927    chr8 127747754 127747756 #> 4     chr1 100041646 100041649    chr8 127753200 127753203 #> 5     chr1 149968016 149968030    chr8 127720533 127720547 #> 6     chr1 180261380 180261390    chr8 127747224 127747234 #> 7     chr1 182119529 182119530    chr8 127747267 127747268 #> 8     chr1 202928006 202928020    chr8 127747224 127747238 #> 9     chr1 207726976 207727002    chr8 127724887 127724913 #> 10    chr1 209800781 209800785    chr8 127753804 127753808 #>                          manta_name  SCORE STRAND_A STRAND_B #> 1                              <NA> 208.20        -        + #> 2                              <NA> 308.00        -        + #> 3                              <NA> 253.09        -        + #> 4                              <NA> 211.34        -        + #> 5                              <NA> 335.95        -        + #> 6  MantaBND:2:133568:133570:0:2:0:0     NA        -        + #> 7                              <NA> 226.75        +        - #> 8                              <NA> 419.03        +        - #> 9                              <NA> 204.27        -        + #> 10 MantaBND:0:549563:738680:0:1:0:0     NA        +        - #>             tumour_sample_id          normal_sample_id VAF_tumour  DP #> 1            01-12047_tumorA           01-12047_normal 0.10396040 202 #> 2  BLGSP-71-30-00665-01A-01E BLGSP-71-30-00665-10A-01D 0.08870968 124 #> 3  BLGSP-71-30-00678-01A-01E BLGSP-71-06-00286-99A-01D 0.05128205 195 #> 4  BLGSP-71-30-00656-01A-01E BLGSP-71-06-00286-99A-01D 0.05241935 248 #> 5            13-38657_tumorB           13-38657_normal 0.10800000 250 #> 6            11-12873_tumorC           11-12873_normal 0.05900000 102 #> 7  BLGSP-71-30-00655-01A-01E BLGSP-71-06-00286-99A-01D 0.05555556 198 #> 8            14-11777_tumorB                 14-11777N 0.03921569 459 #> 9  BLGSP-71-30-00661-01A-01E BLGSP-71-06-00286-99A-01D 0.07253886 193 #> 10 BLGSP-71-30-00647-01A-01E BLGSP-71-06-00286-99A-01D 0.13200000  38 nrow(hg38_myc_locus_sv) #> [1] 683  incorrect_myc_locus_sv <- get_combined_sv(region = myc_region_grch37,                                 projection = \"hg38\") dplyr::select(incorrect_myc_locus_sv,1:14) #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>    CHROM_A   START_A     END_A CHROM_B   START_B     END_B #> 1     chr1 182655283 182655290    chr8 128767396 128767403 #> 2     chr1 233914485 233914492    chr8 128773743 128773750 #> 3    chr11  73459284  73459290    chr8 128758908 128758914 #> 4    chr11  93629111  93629307    chr8 128726629 128726825 #> 5    chr11  93629111  93629647    chr8 128726343 128727380 #> 6    chr11  93629111  93629641    chr8 128726295 128727325 #> 7    chr11  93629111  93629613    chr8 128726323 128727499 #> 8    chr11  93629111  93629581    chr8 128726380 128727086 #> 9    chr11  93629111  93629568    chr8 128726370 128727275 #> 10   chr11  93629111  93629568    chr8 128726368 128727133 #>                          manta_name  SCORE STRAND_A STRAND_B  tumour_sample_id #> 1       MantaBND:203817:0:1:0:0:0:0     NA        -        -   12-23835_tumorA #> 2       MantaBND:306088:0:1:0:0:0:0     NA        +        -   05-16093_tumorA #> 3                              <NA> 259.43        -        +   01-23117_tumorB #> 4       MantaBND:202456:0:1:0:0:0:1     NA        +        - 00-12637_CLC02086 #> 5        MantaBND:28037:1:9:0:0:0:1     NA        +        -         01-20774T #> 6  MantaBND:0:278162:278290:0:0:0:1     NA        +        -          CLC03336 #> 7       MantaBND:170141:0:1:0:0:0:1     NA        +        -          CLC03338 #> 8       MantaBND:204178:0:1:0:0:0:1     NA        +        -          CLC03454 #> 9       MantaBND:157518:0:3:0:0:0:0     NA        +        -          CLC03455 #> 10      MantaBND:191300:0:1:0:0:0:1     NA        +        -          CLC03456 #>    normal_sample_id VAF_tumour  DP #> 1   12-23835_normal  0.0530000 114 #> 2   05-16093_normal  0.0780000  77 #> 3   01-23117_normal  0.1383929 224 #> 4           FL1011N  0.0980000  61 #> 5         14-11247N  0.2800000  25 #> 6         14-11247N  0.2570000 179 #> 7         14-11247N  0.1150000 139 #> 8         14-11247N  0.2710000 140 #> 9         14-11247N  0.2680000  97 #> 10        14-11247N  0.1850000 151 nrow(incorrect_myc_locus_sv) #> [1] 51  # Despite potentially being incomplete, we can nonetheless # annotate these directly for more details annotated_myc_hg38 = suppressMessages(          GAMBLR.utils::annotate_sv(hg38_myc_locus_sv, genome_build = \"hg38\") ) head(annotated_myc_hg38) #>   chrom1    start1      end1 chrom2    start2      end2 name   score strand1 #> 1     18  63123493  63123497      8 127728389 127728393    . 1742.35       + #> 2     18  63195263  63195266      8 127744561 127744564    .      NA       - #> 3      2  28983232  28983241      8 127711263 127711272    .      NA       - #> 4      3  70834666  70834671      8 127750318 127750323    .  249.44       - #> 5      3 101756651 101756656      8 127724888 127724893    .  261.80       + #> 6      4   1746418   1746422      8 127723482 127723486    .      NA       - #>   strand2          tumour_sample_id   gene partner    fusion #> 1       -                 SU-DHL-10   BCL2    <NA>   NA-BCL2 #> 2       -                  SP194216   BCL2    <NA>   NA-BCL2 #> 3       -           02-14764_tumorB    ALK    <NA>    NA-ALK #> 4       + BLGSP-71-30-00661-01A-01E  FOXP1    <NA>  NA-FOXP1 #> 5       - BLGSP-71-30-00676-01A-01E NFKBIZ    <NA> NA-NFKBIZ #> 6       -                 09-41114T  WHSC1    <NA>  NA-WHSC1 table(annotated_myc_hg38$partner) #>  #>  BCL6 CCNL1   DMD   IGH   IGK   IGL  LRMP  PAX5 RFTN1  ZEB2  #>     6     1     2   377     5     7     3    11     1     1  # The usual MYC partners are seen here  annotated_myc_incorrect = suppressMessages(          GAMBLR.utils::annotate_sv(incorrect_myc_locus_sv, genome_build = \"hg38\") ) head(annotated_myc_incorrect) #>   chrom1    start1      end1 chrom2    start2      end2 name score strand1 #> 1      8 127313080 127313571      8 128746007 128746587    .    NA       + #> 2      8 128738977 128738983      8 128752583 128752589    .    NA       + #> 3      8 128738977 128738983      8 128752583 128752589    .    NA       + #> 4      8 128738979 128738981      8 128752583 128752585    .    NA       + #> 5      8 128738979 128738981      8 128752583 128752585    .    NA       + #> 6      8 128738979 128738981      8 128752583 128752585    .    NA       + #>   strand2 tumour_sample_id gene partner fusion #> 1       -         PD26401c  MYC    <NA> NA-MYC #> 2       -  04-14093_tumorA  MYC    <NA> NA-MYC #> 3       -  04-14093_tumorB  MYC    <NA> NA-MYC #> 4       -        05-24065T  MYC    <NA> NA-MYC #> 5       -        10-27119T  MYC    <NA> NA-MYC #> 6       -         SU-DHL-6  MYC    <NA> NA-MYC table(annotated_myc_incorrect$partner) #> < table of extent 0 > # The effect of specifying the wrong coordinate is evident"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_excluded_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Excluded Samples. — get_excluded_samples","title":"Get Excluded Samples. — get_excluded_samples","text":"Exclude samples excluded certain analyses drop merges.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_excluded_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Excluded Samples. — get_excluded_samples","text":"","code":"get_excluded_samples(tool_name = \"slms-3\")"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_excluded_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Excluded Samples. — get_excluded_samples","text":"tool_name tool pipeline generated files (). Default \"slms-3\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_excluded_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Excluded Samples. — get_excluded_samples","text":"vector sample IDs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_excluded_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Excluded Samples. — get_excluded_samples","text":"Specify tool pipeline responsible generating files tool_name function return vector excluded sample IDs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_excluded_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Excluded Samples. — get_excluded_samples","text":"","code":"if (FALSE) { # \\dontrun{   excluded_samp <- get_excluded_samples() } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GAMBL metadata. — get_gambl_metadata","title":"Get GAMBL metadata. — get_gambl_metadata","text":"Return metadata selection samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GAMBL metadata. — get_gambl_metadata","text":"","code":"get_gambl_metadata(   dna_seq_type_priority = \"genome\",   capture_protocol_priority = \"Exome\",   dna_preservation_priority = \"frozen\",   exome_capture_space_priority = c(\"agilent-sureselect-human-all-exon-v7\",     \"agilent-sureselect-V5-plus-utr\", \"idt-xgen-v2-grch37\", \"exome-utr-grch37\",     \"exome-utr-grch38\", \"none\"),   mrna_collapse_redundancy = TRUE,   also_normals = FALSE,   everything = FALSE,   verbose = FALSE,   invert = FALSE,   exclude = \"promethION\",   ... )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GAMBL metadata. — get_gambl_metadata","text":"dna_seq_type_priority default \"genome\" option \"capture\". duplicate biopsy_id/patient combinations different seq_type available, prioritize seq_type drop others. capture_protocol_priority duplicate biopsy_id/patient combinations different seq_type available, prioritize seq_type drop others. dna_preservation_priority prioritize FFPE frozen samples biopsy (default: \"frozen\") exome_capture_space_priority vector specifying prioritize exome capture space #TODO: implement test examples available mrna_collapse_redundancy Default: TRUE. Set FALSE obtain rows mrna seq_type including otherwise collapsed. also_normals Set TRUE force return rows tissue_status normal (default restrict tumour) everything Set TRUE include samples bam_available == FALSE. Default: FALSE - samples bam_available = TRUE retained. verbose Set TRUE chatty output (mostly debugging) invert Set TRUE force function return rows lost prioritization steps (mostly debugging) exclude Specify one seq_type drop output. prevents metadata containing anythong three standard seq_type (genome, capture, mrna). Default setting exclude \"promethION\". ... Additional arguments","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GAMBL metadata. — get_gambl_metadata","text":"data frame metadata biopsy GAMBL compression Format original data used input analysis pipelines (cram, bam fastq) bam_available Whether file available last checked. patient_id anonymized unique identifier patient. BC samples, Res ID. sample_id unique identifier sample analyzed. seq_type assay type used produce data (one \"genome\",\"capture, \"mrna\", \"promethION\") capture_space Unique ID capture space, applicable genome_build name genome reference data aligned . tissue_status Whether sample atumour normal. cohort Name group samples added together (usually single study), often format pathology_cohort_descriptor. library_id unique identifier sequencing library. pathology diagnosis pathology sample time_point Timing biopsy increasing alphabetical order (= diagnosis, B = first relapse etc) protocol General protocol library construction. e.g. \"Ribodepletion\", \"PolyA\", \"Genome\" ffpe_or_frozen Whether nucleic acids extracted frozen FFPE sample read_length length reads (required RNA-seq libraries) strandedness Whether RNA-seq librayr construction strand-specific , , strand. Required RNAseq; \"positive\", \"negative\", \"unstranded\") seq_source_type Required RNAseq. Usually value ffpe_or_frozen sometimes immunotube sorted cells data_path Symbolic link bam cram file (usually relevant GAMBLR) link_name Standardized naming symbolic link (usually relevant GAMBLR) fastq_data_path Symbolic link fastq file (usually relevant GAMBLR) fastq_link_name Standardized naming symbolic link FASTQ file, used (usually relevant GAMBLR) unix_group Whether source external restricted data access agreements (icgc_dart) internal (gambl) COO_consensus TODO DHITsig_consensus TODO COO_PRPS_class TODO DHITsig_PRPS_class TODO DLBCL90_dlbcl_call TODO DLBCL90_dhitsig_call TODO res_id duplicate sample_id local samples NA otherwise DLBCL90_code_set Code set used DLBCL90 call. One DLBCL90 DLBCL90v2 DLBCL90v3 DLBCL90_dlbcl_score TODO DLBCL90_pmbl_score TODO DLBCL90_pmbl_call TODO DLBCL90_dhitsig_score TODO myc_ba Result breakapart FISH MYC locus myc_cn Result copy number FISH MYC locus bcl2_ba Result breakapart FISH BCL2 locus bcl2_cn Result copy number FISH BCL2 locus bcl6_ba Result breakapart FISH BCL6 locus bcl6_cn Result copy number FISH BCL6 locus time_since_diagnosis_years TODO relapse_timing TODO dtbx TODO. REMOVE? dtdx TODO. REMOVE? lymphgen_no_cnv TODO lymphgen_with_cnv TODO lymphgen_cnv_noA53 TODO lymphgen_wright LymphGen call sample Wright et (applicable) fl_grade TODO transformation TODO relapse TODO ighv_mutation_original TODO","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get GAMBL metadata. — get_gambl_metadata","text":"function returns metadata GAMBL samples. replaces functionality original version, still available new name og_get_gambl_metadata. purpose function provide metadata non-redundant set samples GAMBL, dealing types redundancy caused samples biopsies data >1 seq_type (genome capture), different capture protocols (exome targeted capture) etc.","code":""},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GAMBL Outcomes. — get_gambl_outcomes","title":"Get GAMBL Outcomes. — get_gambl_outcomes","text":"Get patient-centric clinical metadata.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GAMBL Outcomes. — get_gambl_outcomes","text":"","code":"get_gambl_outcomes(   patient_ids,   time_unit = \"year\",   censor_cbioportal = FALSE,   complete_missing = FALSE,   from_flatfile = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GAMBL Outcomes. — get_gambl_outcomes","text":"patient_ids Vector patient IDs. time_unit Return follow-times one three time units: year, month day. Default \"year\". censor_cbioportal Optionally request censoring encoded specific style required cBioPortal. Default FALSE. complete_missing Optionally fill gaps ensure values every patient (censor 0 missing). Default FALSE. from_flatfile Optionally set FALSE use database get survival data. Default TRUE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GAMBL Outcomes. — get_gambl_outcomes","text":"Data frame one row patient_id.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_outcomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get GAMBL Outcomes. — get_gambl_outcomes","text":"INTERNAL FUNCTION called get_gambl_metadata, meant --package usage.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gambl_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GAMBL Outcomes. — get_gambl_outcomes","text":"","code":"if (FALSE) { # \\dontrun{   outcome_df = get_gambl_outcomes()   metadata_with_outcomes = dplyr::left_join(                             get_gambl_metadata(),                             outcome_df) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_cn_and_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene CN and Expression. — get_gene_cn_and_expression","title":"Get Gene CN and Expression. — get_gene_cn_and_expression","text":"Get copy number expression single gene.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_cn_and_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene CN and Expression. — get_gene_cn_and_expression","text":"","code":"get_gene_cn_and_expression(gene_symbol, ensembl_id, this_seq_type = \"genome\")"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_cn_and_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene CN and Expression. — get_gene_cn_and_expression","text":"gene_symbol One gene symbols. match values maf file. ensembl_id One ensembl gene IDs. one hugo_symbols ensembl_gene_ids may used. this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_cn_and_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene CN and Expression. — get_gene_cn_and_expression","text":"data frame copy number information gene expressions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_cn_and_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Gene CN and Expression. — get_gene_cn_and_expression","text":"function works well Hugo Symbols Ensembl Gene IDs. also possible specify one gene.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_cn_and_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Gene CN and Expression. — get_gene_cn_and_expression","text":"","code":"if (FALSE) { # \\dontrun{   MYC_cn_expression = get_gene_cn_and_expression(\"MYC\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Expression. — get_gene_expression","title":"Get Gene Expression. — get_gene_expression","text":"Get expression one genes GAMBL samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Expression. — get_gene_expression","text":"","code":"get_gene_expression(   these_samples_metadata,   hugo_symbols,   ensembl_gene_ids,   all_genes = FALSE,   verbose = FALSE,   engine = \"grep\",   format = \"wide\",   lazy_join = FALSE,   arbitrarily_pick = FALSE,   HGNC = FALSE,   ... )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Expression. — get_gene_expression","text":"these_samples_metadata data frame sample metadata. Usually output get_gambl_metadata(). hugo_symbols One gene symbols. used conjunction ensembl_gene_ids. ensembl_gene_ids One ensembl gene IDs. used conjunction hugo_symbols. all_genes Set TRUE full expression data without subsetting (see warnings ). verbose Set TRUE chatty output engine Either readr grep. grep engine usually increase speed loading work want genes long list. format Either wide long. Wide format returns one column expression values per gene. Long format returns one column expression values gene stored separate column. lazy_join TRUE, data frame also capture_sample_id genome_sample_id columns provided. See check_gene_expression information. arbitrarily_pick stop-gap handling rare scenario Hugo_Symbol one ensembl_gene_id. Set TRUE encounter error states \"Values uniquely identified; output contain list-cols.\" HGNC request wide matrix genes, forces columns contain hgnc_id rather ensembl_gene_id ... Optional parameters pass along get_gambl_metadata (used conjunction lazy_join)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Expression. — get_gene_expression","text":"data frame first 9 columns identical columns check_gene_expression remaining columns containing expression values gene requested.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Gene Expression. — get_gene_expression","text":"Efficiently retrieve variance-stabilized batch effect corrected gene expression values one, multiple genes GAMBL samples. information, refer parameter descriptions examples. Warnings: speed loading data heavily impacted many samples load. sake efficiency, sure specify extraneous samples. reduce impact memory (RAM), load data genes need. Combining lazy_join all_genes result data table samples rows genes columns. Use caution. practically guaranteed use RAM want. run function, recommended run check_gene_expression determine samples available","code":""},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_fusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get gene fusions — get_gene_fusions","title":"Get gene fusions — get_gene_fusions","text":"Retrieve fusions identified FusionCatcher","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_fusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get gene fusions — get_gene_fusions","text":"","code":"get_gene_fusions(   projection = \"grch37\",   verbose = F,   keep_genes,   drop_genes,   remove_adjacent_pairs = FALSE,   these_samples_metadata,   join_with_metadata = FALSE,   harmonize_immunoglobulin_partners = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_fusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get gene fusions — get_gene_fusions","text":"projection genome build verbose chatty want experience keep_genes Vector genes restrict drop_genes Vector genes drop (.e. bad/artifacts) remove_adjacent_pairs Set TRUE drop genes already close proximity these_samples_metadata metadata link fusion table join_with_metadata Set TRUE get fusions along sample metadata one data frame harmonize_immunoglobulin_partners Attempt clean IG names consistently one IGH, IGK IGL","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_fusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get gene fusions — get_gene_fusions","text":"data frame bedpe-like format","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_gene_fusions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get gene fusions — get_gene_fusions","text":"","code":"all_fusions = get_gene_fusions() onco_fusions = get_gene_fusions(keep_genes = c(\"BCL2\",\"MYC\",\"BCL6\")) print(head(onco_fusions)) #> # A tibble: 6 × 13 #>   sample_id CHROM_A   START_A     END_A CHROM_B START_B  END_B gene1 gene2 SCORE #>   <chr>     <chr>       <dbl>     <dbl> <chr>     <dbl>  <dbl> <chr> <chr> <dbl> #> 1 01-14875T 3       187463198 187463199 14       1.06e8 1.06e8 BCL6  IGH@      0 #> 2 01-15092T 18       60793477  60793478 14       1.06e8 1.06e8 BCL2  IGH@      0 #> 3 01-17838T 14      106070093 106070094 8        1.29e8 1.29e8 IGH@  MYC       0 #> 4 01-19969T 18       60794689  60794690 14       1.06e8 1.06e8 BCL2  IGH@      0 #> 5 01-20260T 18       60891187  60891188 14       1.06e8 1.06e8 BCL2  IGH@      0 #> 6 01-20260T 14      106209408 106209409 18       6.08e7 6.08e7 IGH@  BCL2      0 #> # ℹ 3 more variables: STRAND_A <chr>, STRAND_B <chr>, FLAGS <chr>"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_lymphgen.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Lymphgen. — get_lymphgen","title":"Get Lymphgen. — get_lymphgen","text":"Get specific flavour LymphGen main GAMBL outputs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_lymphgen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Lymphgen. — get_lymphgen","text":"","code":"get_lymphgen(   these_samples_metadata,   flavour,   lymphgen_file,   keep_all_rows = FALSE,   keep_original_columns = FALSE,   streamlined = FALSE,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_lymphgen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Lymphgen. — get_lymphgen","text":"these_samples_metadata metadata table auto-subset data samples table returning. flavour Lymphgen flavour. lymphgen_file Path lymphgen file. keep_all_rows Boolean parameter, default FALSE. keep_original_columns Boolean parameter, default FALSE. streamlined Boolean, set true get just data frame one column sample_id one LymphGen class verbose Boolean, set TRUE print informational messages. Useful debugging. Default FALSE","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_lymphgen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Lymphgen. — get_lymphgen","text":"run list data frames following names: lymphgen (data frame containing tidy LymphGen output), features (binary matrix indicating patients feature), feature_annotation (data frame one row per LymphGen feature reduced gene arm, arm-level events summary statistics feature across cohort), features_long (data frame one row per LymphGen feature/patient event), sample_annotation (data frame one row per sample columns indicating number features LymphGen class sample)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_lymphgen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Lymphgen. — get_lymphgen","text":"Get specific flavour LymphGen main GAMBL outputs tidy composites. Optionally return matrix features instead","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_lymphgen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Lymphgen. — get_lymphgen","text":"","code":"my_meta <- get_gambl_metadata() #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! lymphgen_all <- get_lymphgen(   flavour = \"no_cnvs.no_sv.with_A53\",   these = my_meta,   keep_original_columns = TRUE ) #> NO A53 #> Joining with `by = join_by(Sample.Name)` #> Joining with `by = join_by(Sample.Name, BTG2)` #> Joining with `by = join_by(Sample.Name)` #> Joining with `by = join_by(Sample.Name, SOCS1)` head(lymphgen_all$features[, c(1:14)]) #> # A tibble: 6 × 14 #>   sample_id       BCL2  EZH2 SOCS1 KMT2D EP300 CREBBP TNFRSF14 MEF2B  IRF8  PIM2 #>   <chr>          <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl> <dbl> <dbl> <dbl> #> 1 00-14595_tumo…     1     1     1     0     0      0        0     0     0     1 #> 2 00-14595_tumo…     1     1     1     0     0      0        0     0     0     0 #> 3 00-14595_tumo…     1     1     1     0     0      0        0     0     0     0 #> 4 00-14595_tumo…     1     1     0     0     0      0        0     0     0     1 #> 5 00-15201_tumo…     0     0     0     1     0      0        0     0     0     0 #> 6 00-15201_tumo…     0     0     0     0     1      0        0     0     0     1 #> # ℹ 3 more variables: BTG2 <dbl>, TBL1XR1 <dbl>, KLHL14 <dbl>  head(lymphgen_all$lymphgen[, c(1:14)]) #> # A tibble: 6 × 14 #>   sample_id       Copy.Number   BCL2.Translocation BCL6.Translocation Model    #>   <chr>           <chr>         <chr>              <chr>              <chr>    #> 1 00-14595_tumorA Not Available Not Available      Not Available      NoFusCGH #> 2 00-14595_tumorB Not Available Not Available      Not Available      NoFusCGH #> 3 00-14595_tumorC Not Available Not Available      Not Available      NoFusCGH #> 4 00-14595_tumorD Not Available Not Available      Not Available      NoFusCGH #> 5 00-15201_tumorA Not Available Not Available      Not Available      NoFusCGH #> 6 00-15201_tumorB Not Available Not Available      Not Available      NoFusCGH #> # ℹ 9 more variables: Confidence.BN2 <dbl>, Confidence.EZB <dbl>, #> #   Confidence.MCD <dbl>, Confidence.N1 <dbl>, Confidence.ST2 <dbl>, #> #   BN2.Feature.Count <dbl>, EZB.Feature.Count <dbl>, MCD.Feature.Count <dbl>, #> #   N1.Feature.Count <dbl>"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Manta SVs — get_manta_sv","title":"Get Manta SVs — get_manta_sv","text":"Retrieve Manta SVs one many samples","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Manta SVs — get_manta_sv","text":"","code":"get_manta_sv(   these_samples_metadata = NULL,   projection = \"grch37\",   region,   min_vaf = 0.1,   min_score = 40,   pass_filters = TRUE,   verbose = TRUE,   from_cache = TRUE,   write_to_file = FALSE,   chromosome,   qstart,   qend,   these_sample_ids = NULL,   pairing_status )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Manta SVs — get_manta_sv","text":"these_samples_metadata metadata data frame limit result sample_ids within projection projection genome build. Default grch37. region Specify single region fetch SVs anchored within using format \"chrom:start-end\" min_vaf minimum tumour VAF SV returned. Default 0.1. min_score lowest Manta somatic score SV returned. Default 40. pass_filters TRUE (default) return SVs annotated PASS FILTER column. Set FALSE keep variants, regardless PASS filters. verbose Set FALSE minimize output console. Default TRUE. parameter also dictates verbose-ness helper function internally called inside main function. from_cache Boolean variable using cached results, default TRUE. write_to_file = TRUE, parameter auto-defaults FALSE. write_to_file Boolean statement outputs bedpe file TRUE, default FALSE. Setting TRUE forces from_cache = FALSE. chromosome DEPRECATED. Use region instead. qstart DEPRECATED. Use region instead. qend DEPRECATED. Use region instead. these_sample_ids DEPRECATED. Use these_samples_metadata instead. pairing_status DEPRECATED. Subset metadata supply these_samples_metadata instead.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Manta SVs — get_manta_sv","text":"data frame bedpe-like format additional columns allow filtering high-confidence SVs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Manta SVs — get_manta_sv","text":"Retrieve Manta SVs additional VCF information allow filtering high-confidence variants. get SV calls multiple samples, supply metadata table via these_samples_metadata subset samples. results restricted sample_ids within data frame. function relies set specific internal functions get_manta_sv_by_samples (from_cache = FALSE). function can also restrict returned breakpoints within genomic region specified via region (chr:start-end format). Useful filtering parameters also available, use min_vaf set minimum tumour VAF SV returned min_score set lowest Manta somatic score SV returned. addition, user can chose return variants, even ones passing filter criteria. , set pass_filters = FALSE (defaults TRUE).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":"advanced-settings-probably-not-for-you-","dir":"Reference","previous_headings":"","what":"Advanced settings (probably not for you)","title":"Get Manta SVs — get_manta_sv","text":"advised leave default from_cache setting TRUE. ensure manta results arre pulled pre-generated merge (.e. cached result). set FALSE combination write_to_file = TRUE, function (re)generate new merged manta calls, user required file permissions. Note, write_to_file set TRUE, function defaults from_cache = FALSE avoid nonsense parameter combinations. function looking ? may want: get_combined_sv running get_combined_sv, likely want annotate result using GAMBLR.utils::annotate_sv","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Manta SVs — get_manta_sv","text":"","code":"# lazily get every SV in the table with default quality filters all_sv <- get_manta_sv() #> [1] \"no metadata provided, fetching all samples...\" #> [1] \"dropping capture samples because manta results\\n      are only available for genome seq_type\" #>  #> The cached results were last updated: 2025-02-24 16:06:43.114603 #>  #> Reading cached results... #> [1] \"No Manta SVs found for 327 samples and 13 cohorts\" #>  [1] \"DLBCL_LSARP_Trios\"   \"tFL_LSARP_Trios\"     \"pFL_LSARP_Trios\"     #>  [4] \"FL_FOLL_BR\"          \"DLBCL_TFRI_DarkZone\" \"DLBCL_Pasqualucci\"   #>  [7] \"DLBCL_montreal\"      \"DLBCL_Jain\"          \"DLBCL_cell_lines\"    #> [10] \"MCL_CellLines\"       \"cHL_Maura\"           \"MM_mmsanger\"         #> [13] \"SMZL_Strefford\"      #>  #> The following VCF filters are applied; #>   Minimum VAF: 0.1 #>   Minimum Score: 40 #>   Only keep variants passing the quality filter: TRUE #>  #> Returning 789098 variants from 1664 sample(s) #>  #> Done! dplyr::select(all_sv,1:14) %>% head() #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>   CHROM_A START_A END_A CHROM_B   START_B     END_B #> 1       1   10286 10286       8 146301391 146301391 #> 2       1   10309 10837      12     95038     95505 #> 3       1   10347 10630      15 102520227 102520676 #> 4       1   10438 10438       8 146301391 146301391 #> 5       1   10438 10438       8 146301391 146301391 #> 6       1   10457 10839      12     94873     95291 #>                     manta_name SCORE STRAND_A STRAND_B tumour_sample_id #> 1   MantaBND:5:1923:1927:0:0:0    46        +        +        09-41114T #> 2   MantaBND:1:6049:6050:1:0:0    52        +        +     4687-03-01BD #> 3  MantaBND:11:3940:4135:0:0:0    58        -        -        12-34927T #> 4   MantaBND:2:7221:7224:0:1:0    84        +        +      102-01-01TD #> 5   MantaBND:2:1723:1728:0:0:0    81        +        +    102-0202-1DVT #> 6 MantaBND:3:26317:26320:0:0:0    56        +        +     4690-03-01BD #>   normal_sample_id VAF_tumour  DP #> 1        14-11247N      0.118 110 #> 2   14-11247Normal      0.250  52 #> 3        14-11247N      0.135 104 #> 4   14-11247Normal      0.520  25 #> 5   14-11247Normal      0.630  27 #> 6   14-11247Normal      0.333  18  # get all SVs for just one cohort cohort_meta = suppressMessages(get_gambl_metadata()) %>%                dplyr::filter(cohort == \"DLBCL_cell_lines\")  some_sv <- get_manta_sv(these_samples_metadata = cohort_meta, verbose=FALSE) dplyr::select(some_sv,1:14) %>% head() #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>   CHROM_A START_A   END_A CHROM_B START_B   END_B               manta_name #> 1       1  963851  963870       1  964461  964461 MantaDEL:14848:0:0:0:0:0 #> 2       1 1142719 1142719       1 1143140 1143140 MantaDEL:14306:0:0:0:0:0 #> 3       1 1142719 1142719       1 1143140 1143140 MantaDEL:14173:0:0:0:0:0 #> 4       1 1142719 1142719       1 1143140 1143140 MantaDEL:11910:0:0:0:0:0 #> 5       1 1161716 1161716       1 1161780 1161780 MantaDEL:15361:0:0:0:0:0 #> 6       1 1161716 1161716       1 1161780 1161780 MantaDEL:11880:0:0:0:0:0 #>   SCORE STRAND_A STRAND_B tumour_sample_id normal_sample_id VAF_tumour  DP #> 1   144        +        -           Toledo        14-11247N      0.923  26 #> 2    94        +        -            HBL-1        14-11247N      0.300 100 #> 3    81        +        -         SU-DHL-4        14-11247N      0.256  78 #> 4    55        +        -         SU-DHL-9        14-11247N      0.183  60 #> 5    48        +        -               HT        14-11247N      0.273  44 #> 6    58        +        -            MD903        14-11247N      0.471  34 nrow(some_sv) #> [1] 21216  # get the SVs in a region around MYC # WARNING: This is not the best way to find MYC SVs. # Use annotate_sv on the full SV set instead. myc_region_hg38 = \"chr8:127710883-127761821\" myc_region_grch37 = \"8:128723128-128774067\"  hg38_myc_locus_sv <- get_manta_sv(region = myc_region_hg38,                                 projection = \"hg38\",                                 verbose = FALSE) dplyr::select(hg38_myc_locus_sv,1:14) %>% head() #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>   CHROM_A  START_A    END_A CHROM_B   START_B     END_B #> 1    chr2  9700440  9700440    chr8 127726024 127726024 #> 2    chr2 28983233 28983240    chr8 127711264 127711271 #> 3    chr2 88858802 88858802    chr8 127744262 127744262 #> 4    chr2 88860304 88860306    chr8 127751936 127751938 #> 5    chr2 88860417 88860417    chr8 127751955 127751955 #> 6    chr2 88861500 88861500    chr8 127748752 127748752 #>                     manta_name SCORE STRAND_A STRAND_B #> 1     MantaBND:80035:1:8:0:0:0   103        +        + #> 2 MantaBND:3:52907:52908:0:3:0    43        -        - #> 3    MantaBND:279432:0:1:0:0:0   148        +        + #> 4  MantaBND:194837:0:1:0:0:0:0   102        +        + #> 5  MantaBND:194837:0:1:0:0:0:0    73        -        - #> 6   MantaBND:1102030:0:1:0:0:0    89        +        + #>            tumour_sample_id          normal_sample_id VAF_tumour  DP #> 1 BLGSP-71-06-00252-01A-01D BLGSP-71-06-00252-10A-01D      0.194 252 #> 2           02-14764_tumorB           02-14764_normal      0.109  55 #> 3                   SP59344                   SP59342      0.386  88 #> 4 BLGSP-71-27-00414-01A-01E BLGSP-71-27-00414-10A-01D      0.171 280 #> 5 BLGSP-71-27-00414-01A-01E BLGSP-71-27-00414-10A-01D      0.117 230 #> 6 BLGSP-71-30-00647-01A-01E BLGSP-71-06-00286-99A-01D      0.283  46 nrow(hg38_myc_locus_sv) #> [1] 458  incorrect_myc_locus_sv <- get_manta_sv(region = myc_region_grch37,                                 projection = \"hg38\",                                 verbose = FALSE) dplyr::select(incorrect_myc_locus_sv,1:14) %>% head() #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>   CHROM_A   START_A     END_A CHROM_B   START_B     END_B #> 1    chr4  77227094  77227100    chr8 128767241 128767247 #> 2    chr8   1287381   1287381    chr8   1287384   1287384 #> 3    chr8 128726344 128727379   chr11  93629113  93629647 #> 4    chr8 128726820 128726820    chr8 128726825 128726825 #> 5    chr8 128726820 128726820    chr8 128726825 128726825 #> 6    chr8 128738979 128738983    chr8 128752584 128752588 #>                   manta_name SCORE STRAND_A STRAND_B tumour_sample_id #> 1  MantaBND:658884:1:2:0:0:0    42        -        -  14-33798_tumorB #> 2 MantaINS:1063533:0:0:0:4:0    51        +        -  97-28459_tumorB #> 3   MantaBND:28037:1:9:0:0:0    66        -        +        01-20774T #> 4  MantaINS:242009:0:0:0:3:0    76        +        -         PD26403a #> 5  MantaINS:226876:7:7:1:3:0    84        +        -         PD26403c #> 6 MantaDEL:1407936:0:1:0:0:0   118        +        -  04-14093_tumorA #>   normal_sample_id VAF_tumour  DP #> 1  14-33798_normal      0.136  44 #> 2          FL3006N      0.308  26 #> 3        14-11247N      0.280  25 #> 4         PD26403b      0.400 105 #> 5         PD26403b      0.407 113 #> 6  04-14093_normal      0.442  43 nrow(incorrect_myc_locus_sv) #> [1] 28  # Despite potentially being incomplete, we can nonetheless # annotate these directly for more details annotated_myc_hg38 = suppressMessages(          GAMBLR.utils::annotate_sv(hg38_myc_locus_sv, genome_build = \"hg38\") ) head(annotated_myc_hg38) #>   chrom1    start1      end1 chrom2    start2      end2 name score strand1 #> 1      2  28983233  28983240      8 127711264 127711271    .    43       - #> 2      4   1746419   1746421      8 127723483 127723485    .    77       - #> 3      8 127226860 127226862      8 127759782 127759784    .    56       + #> 4      8 127226860 127226860      8 127759821 127759821    .    51       - #> 5      8 127301019 127301020      8 127742838 127742839    .    71       - #> 6      8 127301020 127301022      8 127742838 127742840    .    65       + #>   strand2 tumour_sample_id  gene partner   fusion #> 1       -  02-14764_tumorB   ALK    <NA>   NA-ALK #> 2       -        09-41114T WHSC1    <NA> NA-WHSC1 #> 3       +          SP13307   MYC    <NA>   NA-MYC #> 4       -          SP13307   MYC    <NA>   NA-MYC #> 5       -      365-16-01TD   MYC    <NA>   NA-MYC #> 6       +      365-16-01TD   MYC    <NA>   NA-MYC table(annotated_myc_hg38$partner) #>  #>  BCL6 CCNL1   DMD   IGH   IGK   IGL  LRMP  PAX5 RFTN1  #>     3     1     2   293     5     6     1     5     1  # The usual MYC partners are seen here  annotated_myc_incorrect = suppressMessages(          GAMBLR.utils::annotate_sv(incorrect_myc_locus_sv, genome_build = \"hg38\") ) head(annotated_myc_incorrect) #>   chrom1    start1      end1 chrom2    start2      end2 name score strand1 #> 1      8 128726344 128727379     11  93629113  93629647    .    66       - #> 2      8 128726820 128726820      8 128726825 128726825    .    76       + #> 3      8 128726820 128726820      8 128726825 128726825    .    84       + #> 4      8 128738979 128738983      8 128752584 128752588    .   118       + #> 5      8 128738979 128738983      8 128752584 128752588    .   127       + #> 6      8 128738981 128738981      8 128752584 128752584    .   126       + #>   strand2 tumour_sample_id gene partner fusion #> 1       +        01-20774T  MYC    <NA> NA-MYC #> 2       -         PD26403a  MYC    <NA> NA-MYC #> 3       -         PD26403c  MYC    <NA> NA-MYC #> 4       -  04-14093_tumorA  MYC    <NA> NA-MYC #> 5       -  04-14093_tumorB  MYC    <NA> NA-MYC #> 6       -        05-24065T  MYC    <NA> NA-MYC table(annotated_myc_incorrect$partner) #> < table of extent 0 > # The effect of specifying the wrong coordinate is evident"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Manta SV By Sample. — get_manta_sv_by_sample","title":"Get Manta SV By Sample. — get_manta_sv_by_sample","text":"Load manta output (individual flat file) 1 sample.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Manta SV By Sample. — get_manta_sv_by_sample","text":"","code":"get_manta_sv_by_sample(   this_sample_id,   these_samples_metadata,   force_lift = FALSE,   return_anyway = FALSE,   min_vaf = 0.1,   min_score = 40,   pass_filters = TRUE,   projection = \"grch37\",   verbose = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Manta SV By Sample. — get_manta_sv_by_sample","text":"this_sample_id single sample ID want obtain result . parameter supplied, function retrieve sample ID supplied metadata table (these_samples_metadata). these_samples_metadata metadata table containing metadata this_sample_id, sample interest. parameter required. force_lift TRUE, coordinates lifted (needed) selected projection. Default FALSE. WARNING: code calls function directly, set parameter TRUE ensure returned calls respect requested projection. return_anyway Set TRUE force variant calls returned, even lifted, parameter ever modified default setting function called another function handles liftOver separately. min_vaf minimum tumour VAF SV returned. Default value 0.1. min_score lowest Manta somatic score SV returned. Default value 40. pass_filters set TRUE, return SVs annotated PASS FILTER column. Set FALSE keep variants, regardless PASS filters. Default TRUE. projection projection returned calls. Default grch37. verbose Set FALSE prevent path requested bedpe file printed.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Manta SV By Sample. — get_manta_sv_by_sample","text":"data frame containing Manta outputs this_sample_id bedpe-like format additional columns extracted VCF column.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Manta SV By Sample. — get_manta_sv_by_sample","text":"function used retrieving Manta results (structural variants) individual flat-files (one sample). multiple samples, please see get_manta_sv_by_samples (convenience wrapper function get_manta_sv_by_sample). Additional columns extracted VCF column standard filtering options available. function also performs lift-selected projection, needed. Please note, force_lift set FALSE, extra column added states returned variant calls need lifted. value column returned TRUE (rows) available genome projection selected sample match selected projection (.e requiring user manually lift calls). function looking ? Try one following, similar, functions; get_combined_sv, get_manta_sv, get_manta_sv_by_samples","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Manta SV By Sample. — get_manta_sv_by_sample","text":"","code":"if (FALSE) { # \\dontrun{ #example 1 #get manta calls for a sample that needs to be lifted to \"hg38\" and let this function #take care of the liftover step for you. my_sv = get_manta_sv_by_sample(this_sample_id = \"99-27783_tumorA\",                                these_samples_metadata = get_gambl_metadata(),                                projection = \"hg38\",                                force_lift = TRUE)  #example 2 #get manta calls based on an already filtered metadata (with one sample ID) my_metadata = get_gambl_metadata() my_metadata = dplyr::filter(my_metadata, sample_id==\"99-27783_tumorA\")  my_sv = get_manta_sv_by_sample(these_samples_metadata = my_metadata,                                projection = \"hg38\",                                force_lift = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Manta SV By Samples. — get_manta_sv_by_samples","title":"Get Manta SV By Samples. — get_manta_sv_by_samples","text":"Load manta output set samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Manta SV By Samples. — get_manta_sv_by_samples","text":"","code":"get_manta_sv_by_samples(   these_samples_metadata,   min_vaf = 0.1,   min_score = 40,   pass_filters = TRUE,   projection = \"grch37\",   verbose = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Manta SV By Samples. — get_manta_sv_by_samples","text":"these_samples_metadata required parameter metadata table (data frame) must contain row sample want data . additional columns data frame needs contain, besides sample_id, : unix_group, genome_build, seq_type, pairing_status. min_vaf minimum tumour VAF SV returned. Default value 0.1. min_score lowest Manta somatic score SV returned. Default value 40. pass_filters set TRUE, return SVs annotated PASS FILTER column. Set FALSE keep variants, regardless PASS filters. Default TRUE. projection projection returned calls. Default grch37. verbose Set FALSE prevent path requested bedpe file printed.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Manta SV By Samples. — get_manta_sv_by_samples","text":"data frame containing Manta outputs sample_id these_samples_metadata bedpe-like format additional columns extracted VCF column.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Manta SV By Samples. — get_manta_sv_by_samples","text":"convenience wrapper function get_manta_sv_by_sample (called get_manta_sv). function looking ? Try one following, similar, functions; get_combined_sv, get_manta_sv, get_manta_sv_by_sample","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_manta_sv_by_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Manta SV By Samples. — get_manta_sv_by_samples","text":"","code":"if (FALSE) { # \\dontrun{ all_sv = get_manta_sv() metadata = get_gambl_metadata() missing_samples = dplyr::anti_join(metadata,   all_sv,   by = c(\"sample_id\" = \"tumour_sample_id\"))  missing_from_merge = get_manta_sv_by_samples(these_samples_metadata = missing_samples, verbose = FALSE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_raw_expression_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Raw Expression Counts — get_raw_expression_counts","title":"Get Raw Expression Counts — get_raw_expression_counts","text":"Get raw read counts RNA-seq one genes GAMBL samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_raw_expression_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Raw Expression Counts — get_raw_expression_counts","text":"","code":"get_raw_expression_counts(   these_samples_metadata,   existing_sample_id_column,   new_sample_id_column,   all_samples = FALSE,   check = FALSE,   from_flatfile = TRUE,   map_to_symbol = FALSE,   verbose = FALSE,   TPM = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_raw_expression_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Raw Expression Counts — get_raw_expression_counts","text":"these_samples_metadata data frame sample metadata. Usually output get_gambl_metadata(). existing_sample_id_column Specify column contains sample_id want replaced contents new_sample_id_column new_sample_id_column Specify column metadata contains sample_id want used instead existing_sample_id all_samples Set TRUE force function return available data (rarely necessary) check basic debugging. Set TRUE obtain basic information number samples metadata expression data available from_flatfile Set FALSE use database instead reading flatfiles map_to_symbol Set TRUE obtain mappings rows count matrix HGNC gene symbol/alias verbose Set TRUE print statements TPM Set TRUE get TPM estimates instead counts","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_raw_expression_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Raw Expression Counts — get_raw_expression_counts","text":"list containing counts matrix associated metadata DESeq2","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_raw_expression_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Raw Expression Counts — get_raw_expression_counts","text":"Efficiently retrieve raw gene expression values (read counts) one, multiple genes GAMBL samples. examples info, refer parameter descriptions well vignette examples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_raw_expression_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Raw Expression Counts — get_raw_expression_counts","text":"","code":"if (FALSE) { # \\dontrun{ schmitz_meta = get_gambl_metadata() %>%      filter(seq_type==\"mrna\",cohort==\"dlbcl_schmitz\") exp_out = get_raw_expression_counts(these_samples_metadata = schmitz_meta)  # Create DESeq data set directly from the two named objects in the output  dds <- DESeqDataSetFromMatrix(countData = exp_out$counts,     colData = exp_out$metadata,     design = ~ COO_consensus + sex)      # Run a basic DESeq analysis dds <- DESeq(dds) res <- results(dds,      name=\"COO_consensus_GCB_vs_ABC\",     lfcThreshold=2,alpha=0.1) # Filter outputs using padj, logFC and baseMean (more highly expressed overall)      res_df = as.data.frame(res) %>%      filter(padj<0.1,baseMean>500)  show_genes = rownames(res_df) vsd <- vst(dds, blind=FALSE)  #Visualize the results with a heatmap column_ha = HeatmapAnnotation(df=select(exp_out$metadata,COO_consensus,sex)) Heatmap(assay(vsd)[show_genes,],     row_names_gp = gpar(fontsize=5),     bottom_annotation = column_ha,     show_column_names = FALSE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_cn_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sample CN Segments. — get_sample_cn_segments","title":"Get Sample CN Segments. — get_sample_cn_segments","text":"Get segments single (multiple) sample_id(s).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_cn_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sample CN Segments. — get_sample_cn_segments","text":"","code":"get_sample_cn_segments(   these_sample_ids = NULL,   these_samples_metadata = NULL,   from_flatfile = TRUE,   projection = \"grch37\",   this_seq_type = \"genome\",   with_chr_prefix = FALSE,   streamlined = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_cn_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sample CN Segments. — get_sample_cn_segments","text":"data frame segments specific multiple sample ID(s).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_cn_segments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Sample CN Segments. — get_sample_cn_segments","text":"Deprecated. See get_cn_segments.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_wildcards.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sample Wildcards — get_sample_wildcards","title":"Get Sample Wildcards — get_sample_wildcards","text":"Get wildcards sample_id/seq_type combination.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_wildcards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sample Wildcards — get_sample_wildcards","text":"","code":"get_sample_wildcards(this_sample_id, this_seq_type)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_wildcards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sample Wildcards — get_sample_wildcards","text":"this_sample_id sample ID interest. this_seq_type desired seq type, e.g genome/capture.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_wildcards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sample Wildcards — get_sample_wildcards","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_wildcards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Sample Wildcards — get_sample_wildcards","text":"Return sample wildcards, useful getting wildcard information necessary retrieving sample-level flat-files glue.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_sample_wildcards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Sample Wildcards — get_sample_wildcards","text":"","code":"if (FALSE) { # \\dontrun{ get_sample_wildcards(this_sample_id = \"00-15201_tumorA\",                      this_seq_type = \"genome\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_samples_md5_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate md5 Hash For Samples — get_samples_md5_hash","title":"Generate md5 Hash For Samples — get_samples_md5_hash","text":"Generate md5 hash set samples help ensure reproducibility","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_samples_md5_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate md5 Hash For Samples — get_samples_md5_hash","text":"","code":"get_samples_md5_hash(   these_samples_metadata,   these_samples,   sample_set_name,   sample_sets_df )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_samples_md5_hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate md5 Hash For Samples — get_samples_md5_hash","text":"these_samples_metadata Optionally provide metadata table data frame column named sample_id subset samples working . these_samples Optionally provide vector sample_id working . sample_set_name Optionally provide name sample set GAMBL function load samples set provide hash. sample_sets_df Optionally provide data frame sample sets instead relying /loading local file GAMBL repo.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_samples_md5_hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate md5 Hash For Samples — get_samples_md5_hash","text":"md5 hash ordered set sample_id.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_samples_md5_hash.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate md5 Hash For Samples — get_samples_md5_hash","text":"function can accept wide range formatted sample IDs create md5 hash. example, user working already subset metadata table (sample IDs interest), user can give table function these_sampels_metadata. alternative, sample IDs can also provided vector characters these_samples parameter. Another option use defined sample sets (GAMBL) sample_set_name. final option, user can also provide data frame samples IDs instead loading GAMBL repo, achieved calling sample_sets_df parameter.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssh_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SSH Session. — get_ssh_session","title":"Get SSH Session. — get_ssh_session","text":"Create ssh session GSC (requires active VPN connection)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssh_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SSH Session. — get_ssh_session","text":"","code":"get_ssh_session(host = \"gphost01.bcgsc.ca\")"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssh_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SSH Session. — get_ssh_session","text":"host Default \"gphost01.bcgsc.ca\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssh_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SSH Session. — get_ssh_session","text":"external pointer class 'ssh_session'","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssh_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get SSH Session. — get_ssh_session","text":"Using ssh R package create ssh session.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssh_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SSH Session. — get_ssh_session","text":"","code":"if (FALSE) { # \\dontrun{ my_session = get_ssh_session() } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SSM By Region. — get_ssm_by_region","title":"Get SSM By Region. — get_ssm_by_region","text":"Retrieve SSMs GAMBL database within single genomic coordinate range.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SSM By Region. — get_ssm_by_region","text":"","code":"get_ssm_by_region(   chromosome,   qstart,   qend,   region = \"\",   these_sample_ids = NULL,   these_samples_metadata = NULL,   basic_columns = TRUE,   streamlined = FALSE,   maf_data,   this_seq_type = \"genome\",   projection = \"grch37\",   from_indexed_flatfile = TRUE,   augmented = TRUE,   min_read_support = 3,   mode = \"slms-3\",   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SSM By Region. — get_ssm_by_region","text":"chromosome chromosome restricting (without chr prefix). qstart Query start coordinate range restricting . qend Query end coordinate range restricting . region Region formatted like chrX:1234-5678 instead specifying chromosome, start end separately. these_sample_ids Optional, vector multiple sample_id (single sample ID string) want results . these_samples_metadata Optional, metadata table (sample IDs column) subset return . basic_columns Set FALSE return MAF columns (116). Default TRUE, returns first 45 columns. Note streamlined set TRUE, two columns returned, regardless specified parameter. streamlined Return Start_Position Tumor_Smaple_Barcode two MAF columns. Default FALSE. Setting TRUE overwrite anything specified basic_columns. maf_data already loaded MAF like object subset regions interest. this_seq_type seq_type want back, default genome. projection Obtain variants projected reference (one grch37 hg38). from_indexed_flatfile Set TRUE avoid using database instead rely flatfiles. augmented default: TRUE. Set FALSE instead want original MAF sample multi-sample patients instead augmented MAF. min_read_support returns variants least many reads t_alt_count (cleaning augmented MAFs). mode works indexed flatfiles. Accepts 2 options \"slms-3\" \"strelka2\" indicate variant caller use. Default \"slms-3\". verbose Boolean parameter set FALSE per default.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SSM By Region. — get_ssm_by_region","text":"data frame containing MAF data columns (one row per mutation).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get SSM By Region. — get_ssm_by_region","text":"function lets user specify region interest returning SSM calls within region. multiple ways region can specified. example, user can provide full region \"region\" format (chr:start-end) region parameter. , user can provide chromosome, start end coordinates individually chr, start, end parameters. usage examples, refer parameter descriptions examples vignettes. function looking ? Try one following, similar, functions; get_coding_ssm, get_coding_ssm_status, get_ssm_by_patients, get_ssm_by_sample, get_ssm_by_samples, get_ssm_by_regions","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SSM By Region. — get_ssm_by_region","text":"","code":"#basic usage my_mutations = GAMBLR.results:::get_ssm_by_region(                  region = \"chr8:128723128-128774067\")   #keep all 116 columns in the read MAF bcl2_all_details = GAMBLR.results:::get_ssm_by_region(                      region = \"chr18:60796500-60988073\",                      basic_columns = FALSE) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SSM By Regions. — get_ssm_by_regions","title":"Get SSM By Regions. — get_ssm_by_regions","text":"Efficiently retrieve mutations across range genomic regions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SSM By Regions. — get_ssm_by_regions","text":"","code":"get_ssm_by_regions(   regions_list,   regions_bed,   these_sample_ids = NULL,   these_samples_metadata = NULL,   streamlined = TRUE,   maf_data = maf_data,   use_name_column = FALSE,   from_indexed_flatfile = TRUE,   mode = \"slms-3\",   augmented = TRUE,   this_seq_type = \"genome\",   projection = \"grch37\",   min_read_support = 4,   basic_columns = FALSE,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SSM By Regions. — get_ssm_by_regions","text":"regions_list Either provide vector regions chr:start-end format . regions_bed Better yet, provide bed file coordinates want retrieve. these_sample_ids Optional, vector multiple sample_id (single sample ID string) want results . these_samples_metadata Optional, metadata table (sample IDs column) subset return . streamlined TRUE (default), 3 columns kept maf (start, sample_id region name). return columns, set parameter FALSE, see basic_column info. Note, parameter TRUE, function disregard anything specified basic_columns. maf_data Use already loaded MAF data frame. use_name_column bed-format data frame name column (must named \"name\") can used name regions. from_indexed_flatfile Set TRUE avoid using database instead rely flatfiles (works streamlined data, full MAF details). mode works indexed flatfiles. Accepts 2 options \"slms-3\" \"strelka2\" indicate variant caller use. Default \"slms-3\". augmented default: TRUE. Set FALSE instead want original MAF sample multi-sample patients instead augmented MAF this_seq_type seq_type want back, default genome. projection Obtain variants projected reference (one grch37 hg38). min_read_support returns variants least many reads t_alt_count (cleaning augmented MAFs). basic_columns Parameter used streamlined FALSE. Set parameter TRUE returning maf standard 45 columns, set FALSE keep 116 maf columns returned object. return 116 maf columns, set parameter FALSE. verbose Boolean parameter set FALSE per default.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SSM By Regions. — get_ssm_by_regions","text":"Returns data frame variants MAF-like format.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get SSM By Regions. — get_ssm_by_regions","text":"function internally calls get_ssm_by_region retrieve SSM calls specified regions. See parameter descriptions get_ssm_by_region information different parameters can called. function looking ? Try one following, similar, functions; get_coding_ssm, get_coding_ssm_status, get_ssm_by_sample, get_ssm_by_samples, get_ssm_by_region","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SSM By Regions. — get_ssm_by_regions","text":"","code":"regions_bed = GAMBLR.utils::create_bed_data(    GAMBLR.data::grch37_ashm_regions,    fix_names = \"concat\",    concat_cols = c(\"gene\",\"region\"),sep=\"-\" ) %>% head(20)  DLBCL_meta = suppressMessages(get_gambl_metadata()) %>%                  dplyr::filter(pathology==\"DLBCL\") ashm_MAF = get_ssm_by_regions(regions_bed = regions_bed,                              these_samples_metadata = DLBCL_meta,                              streamlined=FALSE) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) ashm_MAF %>% dplyr::arrange(Start_Position,Tumor_Sample_Barcode) %>%               dplyr::select(Hugo_Symbol,                     Tumor_Sample_Barcode,                     Chromosome,Start_Position,                     Reference_Allele,                     Tumor_Seq_Allele2) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>    Hugo_Symbol      Tumor_Sample_Barcode Chromosome Start_Position #> 1       KLHL21           13-26835_tumorA          1        6661537 #> 2       KLHL21           13-26835_tumorB          1        6661537 #> 3       KLHL21           13-26835_tumorD          1        6661537 #> 4       KLHL21                  SP193546          1        6661538 #> 5       KLHL21 HTMCP-01-06-00497-01A-01D          1        6661563 #> 6       KLHL21           17-40409_tumorA          1        6661575 #> 7       KLHL21           17-40409_tumorB          1        6661575 #> 8       KLHL21 HTMCP-01-06-00136-01A-01D          1        6661604 #> 9       KLHL21                 15-26538T          1        6661607 #> 10      KLHL21                 10-18191T          1        6661655 #>    Reference_Allele Tumor_Seq_Allele2 #> 1                 A                 T #> 2                 A                 T #> 3                 A                 T #> 4                 C                 G #> 5                 G                 C #> 6                 C                 T #> 7                 C                 T #> 8                 G                 C #> 9                 G                 A #> 10                A                 G"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SSM By Sample. — get_ssm_by_sample","title":"Get SSM By Sample. — get_ssm_by_sample","text":"Get SSMs (.e. load MAF) single sample.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SSM By Sample. — get_ssm_by_sample","text":"","code":"get_ssm_by_sample(   these_samples_metadata,   tool_name = \"slms-3\",   projection = \"grch37\",   augmented = TRUE,   flavour = \"clustered\",   min_read_support = 3,   basic_columns = TRUE,   maf_cols = NULL,   verbose = FALSE,   this_sample_id,   this_seq_type )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SSM By Sample. — get_ssm_by_sample","text":"these_samples_metadata Required specifying this_sample_id this_seq_type single row entire metadata table containing sample_id. tool_name name variant calling pipeline (currently slms-3 supported). projection projection genome build. Supports hg38 grch37. augmented default: TRUE. Set FALSE instead want original MAF sample multi-sample patients instead augmented MAF. flavour Currently function supports one flavour option feature meant eventual compatibility additional variant calling parameters/versions. min_read_support returns variants least many reads t_alt_count (cleaning augmented MAFs). basic_columns Return first 43 columns MAF rather full details. Default TRUE. maf_cols basic_columns set FALSE, user can specify columns returned within MAF. parameter can either vector indexes (integer) vector characters. verbose Enable debugging/noisier output. this_sample_id Deprecated. Inferred these_samples_metadata this_seq_type Deprecated. Inferred these_samples_metadata","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SSM By Sample. — get_ssm_by_sample","text":"data frame MAF format.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get SSM By Sample. — get_ssm_by_sample","text":"implemented allow flexibility samples may want use different set variants main GAMBL merge. current use case allow force_unmatched output used replace SSMs merge samples known contamination normal. also useful apply blacklist individual MAFs coupled annotate_ssm_blacklist. function looking ? Try one following, similar, functions; get_coding_ssm, get_coding_ssm_status, get_ssm_by_patients, get_ssm_by_samples, get_ssm_by_region, get_ssm_by_regions","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SSM By Sample. — get_ssm_by_sample","text":"","code":"maf_samp = GAMBLR.results:::get_ssm_by_sample(   get_gambl_metadata() %>% dplyr::filter(sample_id==\"13-27975_tumorA\"),   augmented = FALSE ) #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! nrow(maf_samp) #> [1] 4705 maf_samp_aug = GAMBLR.results:::get_ssm_by_sample(   get_gambl_metadata() %>% dplyr::filter(sample_id==\"13-27975_tumorA\"),   augmented = TRUE ) #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! nrow(maf_samp_aug) #> [1] 6118    some_maf = GAMBLR.results:::get_ssm_by_sample(                           these_samples_metadata = get_gambl_metadata() %>%                             dplyr::filter(sample_id == \"HTMCP-01-06-00485-01A-01D\",                                      seq_type == \"genome\"),                          projection = \"hg38\") #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count  dplyr::select(some_maf,1:10) #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>        Hugo_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position #> 1          Unknown              0      .     GRCh38       chr1        5446963 #> 2           CAMTA1              0      .     GRCh38       chr1        7244319 #> 3             PER3              0      .     GRCh38       chr1        7828459 #> 4          TNFRSF9              0      .     GRCh38       chr1        7911008 #> 5  ENSR00000000893              0      .     GRCh38       chr1        8181883 #> 6           PIK3CD              0      .     GRCh38       chr1        9726972 #> 7            CASZ1              0      .     GRCh38       chr1       10720942 #> 8           CELA2A              0      .     GRCh38       chr1       15454068 #> 9          PLA2G2A              0      .     GRCh38       chr1       19975558 #> 10         PLA2G2C              0      .     GRCh38       chr1       20172387 #>    End_Position Strand Variant_Classification Variant_Type #> 1       5446963      +                    IGR          SNP #> 2       7244319      +                 Intron          SNP #> 3       7828459      +                 Intron          SNP #> 4       7911008      +                3'Flank          SNP #> 5       8181883      +                    IGR          SNP #> 6       9726972      +      Missense_Mutation          SNP #> 7      10720942      +                 Intron          SNP #> 8      15454068      +                5'Flank          SNP #> 9      19975559      +                  3'UTR          DEL #> 10     20172387      +                 Intron          SNP"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SSM By Samples. — get_ssm_by_samples","title":"Get SSM By Samples. — get_ssm_by_samples","text":"Get genome-wide set mutations one sample including coding non-coding mutations.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SSM By Samples. — get_ssm_by_samples","text":"","code":"get_ssm_by_samples(   these_samples_metadata,   tool_name = \"slms-3\",   projection = \"grch37\",   flavour = \"clustered\",   these_genes,   min_read_support = 3,   basic_columns = TRUE,   maf_cols = NULL,   subset_from_merge = FALSE,   augmented = TRUE,   engine = \"fread_maf\",   these_sample_ids,   this_seq_type )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SSM By Samples. — get_ssm_by_samples","text":"these_samples_metadata Optional metadata table. provided, return SSM calls samples metadata table. tool_name supports slms-3 currently. projection Obtain variants projected reference (one grch37 hg38). min_read_support returns variants least many reads t_alt_count (cleaning augmented MAFs). basic_columns Return first 45 columns MAF rather full details. Default TRUE. maf_cols basic_columns set FALSE, user can specify columns returned within MAF. parameter can either vector indexes (integer) vector characters. subset_from_merge Instead merging individual MAFs, data subset pre-merged MAF samples specified this_seq_type. augmented default: TRUE. Set FALSE instead want original MAF sample multi-sample patients instead. engine Specify one readr fread_maf (default) change large files loaded prior subsetting. may better performance one fread_maf faster uses lot less RAM. these_sample_ids Deprecated. Inferred these_samples_metadata this_seq_type Deprecated. Inferred these_samples_metadata","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SSM By Samples. — get_ssm_by_samples","text":"data frame MAF format.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get SSM By Samples. — get_ssm_by_samples","text":"user can specify metadata table (these_samples_metadata), subset sample IDs interest. situations, never need run subset_from_merge = TRUE, inefficient. function scale well many samples. cases, users actually need either get_coding_ssm get_ssm_by_region. See get_ssm_by_sample information. function looking ? Try one following, similar, functions; get_coding_ssm, get_ssm_by_patients, get_ssm_by_regions","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_ssm_by_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SSM By Samples. — get_ssm_by_samples","text":"","code":"my_meta = get_gambl_metadata() %>%                         dplyr::filter(sample_id %in% c(\"HTMCP-01-06-00485-01A-01D\",                                                \"14-35472_tumorA\",                                                \"14-35472_tumorB\")) #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! sample_ssms = get_ssm_by_samples(these_samples_metadata = my_meta) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat)  hg38_ssms = get_ssm_by_samples(projection=\"hg38\",                                these_samples_metadata = my_meta) #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count  dplyr::group_by(hg38_ssms,Tumor_Sample_Barcode) %>%    dplyr::count() #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>        Tumor_Sample_Barcode    n #> 1           14-35472_tumorA 5265 #> 2           14-35472_tumorB 7966 #> 3 HTMCP-01-06-00485-01A-01D 2160 hg38_ssms_no_aug = get_ssm_by_samples(projection=\"hg38\",                                these_samples_metadata = my_meta,augmented= FALSE) #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count #> Warning: The following named parsers don't match the column names: GENE_PHENO, FILTER, flanking_bps, vcf_id, vcf_qual, gnomAD_AF, gnomAD_AFR_AF, gnomAD_AMR_AF, gnomAD_SAS_AF, vcf_pos, gnomADg_AF, blacklist_count  dplyr::group_by(hg38_ssms_no_aug,Tumor_Sample_Barcode) %>%    dplyr::count() #> genomic_data Object #> Genome Build: hg38  #> Showing first 10 rows: #>        Tumor_Sample_Barcode    n #> 1           14-35472_tumorA 4001 #> 2           14-35472_tumorB 7470 #> 3 HTMCP-01-06-00485-01A-01D 2160  if (FALSE) { # \\dontrun{ my_metadata = dplyr::filter(my_metadata, pathology == \"FL\")  sample_ssms = get_ssm_by_samples(these_samples_metadata = my_metadata) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_study_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Study Info. — get_study_info","title":"Get Study Info. — get_study_info","text":"Function retrieving study specific identifiers.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_study_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Study Info. — get_study_info","text":"","code":"get_study_info(dir, list_to_global = FALSE)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_study_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Study Info. — get_study_info","text":"dir relative path study directory (expects find meta_study.txt folder). list_to_global Boolean parameter, set TRUE study identifiers returned global environment. Default FALSE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_study_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Study Info. — get_study_info","text":"list study specific identifiers, nothing (.e list_to_global = TRUE).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_study_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Study Info. — get_study_info","text":"function takes one required parameter (dir). relative path main directory study interest. function reads meta_study.txt file extracts unique study identifiers. returns list holds identifiers. user can also return study identifiers global environment. , set list_to_global = TRUE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_study_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Study Info. — get_study_info","text":"","code":"if (FALSE) { # \\dontrun{ #return study identifiers as  list: my_study_info= get_study_info(dir = \"path/to/study/\")  #return all identifiers to the global environment: get_study_info(dir = \"path/to/study/\", list_to_global = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_timed_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MutationTimeR Results — get_timed_mutations","title":"Load MutationTimeR Results — get_timed_mutations","text":"function retrieves loads MutationTimeR timing estimates single sample_id successfully timed un-timed SSMs CNAs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_timed_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MutationTimeR Results — get_timed_mutations","text":"","code":"get_timed_mutations(this_sample_metadata, projection, verbose = FALSE)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_timed_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MutationTimeR Results — get_timed_mutations","text":"this_sample_metadata Metadata one row containing details desired genome sample_id projection Genome build projection (e.g., \"hg38\" \"grch37\"). verbose Set TRUE chattier experience. Default FALSE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_timed_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MutationTimeR Results — get_timed_mutations","text":"named list containing two data.frames ssm cna timing information","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/get_timed_mutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load MutationTimeR Results — get_timed_mutations","text":"","code":"if (FALSE) { # \\dontrun{  my_meta = suppressMessages(get_gambl_metadata()) %>%   dplyr::filter(sample_id==\"01-20985T\",                seq_type==\"genome\")  timed = GAMBLR.results::get_timed_mutations(my_meta,\"hg38\")   head(timed$CNA)   head(timed$SSM) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/link_seq_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Link seq type IDs — link_seq_types","title":"Link seq type IDs — link_seq_types","text":"Link sample IDs seq type sample IDs different seq type share feature, e.g. biopsy_id.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/link_seq_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link seq type IDs — link_seq_types","text":"","code":"link_seq_types(   these_sample_ids,   given_seq_type,   desired_seq_type,   intermediary )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/link_seq_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link seq type IDs — link_seq_types","text":"these_sample_ids vector sample IDs seq type specified given_seq_type. given_seq_type single string specifying seq type these_sample_ids. Possible values one \"genome\", \"capture\", \"mrna\". desired_seq_type single string specifying seq type desired sample IDs. Possible values one \"genome\", \"capture\", \"mrna\", \"\". \"\", sample IDs seq type given_seq_type returned. intermediary vector one strings column names metadata act intermediaries link given sample IDs desired sample IDs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/link_seq_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link seq type IDs — link_seq_types","text":"data frame given desired sample IDs, values feature specified intermediary parameter, multi_desired_id column.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/link_seq_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Link seq type IDs — link_seq_types","text":"one sample id desired seq type associated value intermediary, multi_desired_id column output table show 1 instead 0.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/link_seq_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Link seq type IDs — link_seq_types","text":"","code":"if (FALSE) { # \\dontrun{ link_seq_types(   these_sample_ids = c(\"00-14595_tumorA\", \"04-21622_tumorB\", \"01-20774T\"),    given_seq_type = \"genome\",   desired_seq_type = \"mrna\",    intermediary = c(\"patient_id\", \"biopsy_id\") ) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/maf_to_custom_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Maf To Custom Track. — maf_to_custom_track","title":"Maf To Custom Track. — maf_to_custom_track","text":"Convert mutations UCSC custom track file","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/maf_to_custom_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maf To Custom Track. — maf_to_custom_track","text":"","code":"maf_to_custom_track(   maf_data,   these_samples_metadata = NULL,   this_seq_type = \"genome\",   output_file,   as_bigbed = FALSE,   colour_column = \"lymphgen\",   as_biglolly = FALSE,   track_name = \"GAMBL mutations\",   track_description = \"mutations from GAMBL\",   verbose = FALSE,   padding_size = 0,   projection = \"grch37\",   bedToBigBed_path = \"config\",   these_sample_ids = NULL )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/maf_to_custom_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maf To Custom Track. — maf_to_custom_track","text":"maf_data maf_data obtained get_ssm family functions. these_samples_metadata metadata table subset samples interest input maf_data. NULL (default), samples maf_data kept. this_seq_type seq type want back, default \"genome\". output_file Name new bed file can uploaded custom track UCSC. as_bigbed Boolean parameter controlling format returned file. Default FALSE. colour_column Set colouring properties returned bed file. Per default, function assign colour based \"lymphgen\". as_biglolly Boolean parameter controlling format returned file. Default FALSE (.e BED file returned). track_name Track name. Default \"GAMBL mutations\" track_description Track description. Default \"mutations GAMBL\" verbose Default FALSE. padding_size Optional parameter specifying padding size returned file, default 0. projection Specify genome build use. Possible values \"grch37\" (default) \"hg38\". parameter effect as_bigbed as_biglolly TRUE. bedToBigBed_path Path local bedToBigBed UCSC tool string \"config\" (default). set \"config\", GAMBLR.helpers::check_config_value called internally bedToBigBed path obtained config.yml file saved current working directory. parameter ignored as_bigbed as_biglolly set FALSE. these_sample_ids DEPRECATED","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/maf_to_custom_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maf To Custom Track. — maf_to_custom_track","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/maf_to_custom_track.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maf To Custom Track. — maf_to_custom_track","text":"function takes set mutations maf_data converts UCSC Genome Browser ready BED (bigbed/biglolly) file complete required header. Upload resulting file UCSC genome browser view data custom track. Optional parameters available customization returned file. information, refer parameter descriptions function examples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/maf_to_custom_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maf To Custom Track. — maf_to_custom_track","text":"","code":"# using grch37 coordinates myc_grch37 <- GAMBLR.utils::create_bed_data(                 GAMBLR.data::grch37_lymphoma_genes_bed               ) %>%               dplyr::filter(name == \"MYC\")  print(myc_grch37) #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>   chrom     start       end name #> 1     8 128747680 128753674  MYC # desired projection will be automatically set to the # genome_build of your region object genome_maf <- get_ssm_by_regions(regions_bed = myc_grch37,                              these_samples_metadata = get_gambl_metadata(),                              this_seq_type = \"genome\",                              streamlined = FALSE) #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat)  # myc_hg19.bed will be created in your working directory  maf_to_custom_track(maf_data = genome_maf,                    output_file = \"myc_genome_hg19.bed\") #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! #> Joining with `by = join_by(group)`  #lazy/concise way: my_region = \"8:128747680-128753674\"  capture_maf <- get_ssm_by_regions(regions_list = my_region,                              these_samples_metadata = get_gambl_metadata(),                              this_seq_type = \"genome\",                              projection = \"grch37\",                              streamlined = FALSE) #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) maf_to_custom_track(maf_data = capture_maf,                    output_file = \"myc_capture_hg19.bed\") #> 3273 capture samples are missing a value for protocol. Assuming Exome. #> 138 biopsies are missing from the biopsy metadata. This should be fixed! #> affected cohorts:  DLBCL_LSARP_Trios,Ennishi_tapestri,SMZL_Strefford,cHL_Maura,MCL_Barcelona #> 110 biopsies with discrepancies in the pathology field. This should be fixed! #> 10 biopsies with discrepancies in the time_point field. This should be fixed! #> Joining with `by = join_by(group)`"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/og_get_gambl_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GAMBL metadata. — og_get_gambl_metadata","title":"Get GAMBL metadata. — og_get_gambl_metadata","text":"Return metadata selection samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/og_get_gambl_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GAMBL metadata. — og_get_gambl_metadata","text":"","code":"og_get_gambl_metadata(   seq_type_filter = \"genome\",   tissue_status_filter = \"tumour\",   case_set,   remove_benchmarking = TRUE,   with_outcomes = TRUE,   sample_flatfile,   biopsy_flatfile,   only_available = TRUE,   seq_type_priority = \"genome\",   from_flatfile )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/og_get_gambl_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GAMBL metadata. — og_get_gambl_metadata","text":"seq_type_filter Filtering criteria (default: genomes). tissue_status_filter Filtering criteria tissue status. Possible values \"tumour\" (default) \"normal\". case_set Optional short name pre-defined set cases avoiding embargoed cases (current options: 'BLGSP-study', 'FL-study', 'DLBCL-study', 'FL-DLBCL-study', 'FL-DLBCL-', 'DLBCL-unembargoed', 'BL-DLBCL-manuscript', 'MCL','MCL-CLL'). remove_benchmarking default FFPE benchmarking duplicate samples dropped. with_outcomes Optionally join gambl outcome data. sample_flatfile Optionally provide full path sample table use instead default. biopsy_flatfile Optionally provide full path biopsy table use instead default. only_available TRUE, remove samples FALSE NA bam_available column (default: TRUE). seq_type_priority duplicate sample_id different seq_type available, metadata prioritize seq_type drop others. Possible values \"genome\" \"capture\". from_flatfile Deprecated (ignored)","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/og_get_gambl_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GAMBL metadata. — og_get_gambl_metadata","text":"data frame metadata biopsy GAMBL compression Format original data used input analysis pipelines (cram, bam fastq) bam_available Whether file available last checked. patient_id anonymized unique identifier patient. BC samples, Res ID. sample_id unique identifier sample analyzed. seq_type assay type used produce data (one \"genome\",\"capture, \"mrna\", \"promethION\") genome_build name genome reference data aligned . tissue_status Whether sample atumour normal. cohort Name group samples added together (usually single study), often format pathology_cohort_descriptor. library_id unique identifier sequencing library. pathology diagnosis pathology sample time_point Timing biopsy increasing alphabetical order (= diagnosis, B = first relapse etc) protocol General protocol library construction. e.g. \"Ribodepletion\", \"PolyA\", \"Genome\" ffpe_or_frozen Whether nucleic acids extracted frozen FFPE sample read_length length reads (required RNA-seq libraries) strandedness Whether RNA-seq librayr construction strand-specific , , strand. Required RNAseq; \"positive\", \"negative\", \"unstranded\") seq_source_type Required RNAseq. Usually value ffpe_or_frozen sometimes immunotube sorted cells data_path Symbolic link bam cram file (usually relevant GAMBLR) link_name Standardized naming symbolic link (usually relevant GAMBLR) data_path Symbolic link fastq file (usually relevant GAMBLR) fastq_link_name Standardized naming symbolic link FASTQ file, used (usually relevant GAMBLR) unix_group Whether source external restricted data access agreements (icgc_dart) internal (gambl) COO_consensus TODO DHITsig_consensus TODO COO_PRPS_class TODO DHITsig_PRPS_class TODO DLBCL90_dlbcl_call TODO DLBCL90_dhitsig_call TODO res_id duplicate sample_id local samples NA otherwise DLBCL90_code_set Code set used DLBCL90 call. One DLBCL90 DLBCL90v2 DLBCL90v3 DLBCL90_dlbcl_score TODO DLBCL90_pmbl_score TODO DLBCL90_pmbl_call TODO DLBCL90_dhitsig_score TODO myc_ba Result breakapart FISH MYC locus myc_cn Result copy number FISH MYC locus bcl2_ba Result breakapart FISH BCL2 locus bcl2_cn Result copy number FISH BCL2 locus bcl6_ba Result breakapart FISH BCL6 locus bcl6_cn Result copy number FISH BCL6 locus time_since_diagnosis_years TODO relapse_timing TODO dtbx TODO. REMOVE? dtdx TODO. REMOVE? lymphgen_no_cnv TODO lymphgen_with_cnv TODO lymphgen_cnv_noA53 TODO lymphgen_wright LymphGen call sample Wright et (applicable) fl_grade TODO capture_frozen_sample_id TODO capture_FFPE_sample_id TODO capture_unknown_sample_id TODO genome_frozen_sample_id TODO genome_ctDNA_sample_id TODO genome_FFPE_sample_id TODO mrna_PolyA_frozen_sample_id TODO mrna_Ribodepletion_frozen_sample_id TODO mrna_Ribodepletion_frozen_sample_id TODO XXX_cohort Cohort name batch effect correction(?) transformation TODO relapse TODO ighv_mutation_original TODO normal_sample_id TODO pairing_status TODO ICGC_ID TODO ICGC_XXX metadata value ICGC cohort inferred external metadata detailed_pathology TODO COO_final TODO consensus_pathology TODO lymphgen TODO Tumor_Sample_Barcode Duplicate sample_id simplifying joins MAF data frames consensus_coo_dhitsig TODO pathology_rank Numeric rank consistent ordering samples pathology lymphgen_rank Numeric rank consistent ordering samples LymphGen hiv_status TODO CODE_XXX Event-free status last follow-overall survival (OS), progression-free survival (PFS) etc. 0 = event/censored. 1 = event XXX_YEARS Time, years, diagnosis last follow-overall survival (OS), progression-free survival (PFS) alive Theoretically redundant CODE_OS is_adult Adult pediatric diagnosis. One \"Adult\" adults \"Pediatric\" otherwise age_group Adult_BL Pediatric_BL , specific BLGSP study age patient age diagnosis sex biological sex patient, available. Allowable options: M, F, NA tx_primary TODO cause_of_death TODO","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/og_get_gambl_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get GAMBL metadata. — og_get_gambl_metadata","text":"function returns metadata GAMBL samples. Options subset filter returned data available. information use function different filtering criteria, refer parameter descriptions, examples vignettes. Embargoed cases (current options: 'BLGSP-study', 'FL-study', 'DLBCL-study', 'FL-DLBCL-study', 'FL-DLBCL-', 'DLBCL-unembargoed', 'BL-DLBCL-manuscript', 'MCL','MCL-CLL')","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/og_get_gambl_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GAMBL metadata. — og_get_gambl_metadata","text":"","code":"if (FALSE) { # \\dontrun{ #basic usage my_metadata = suppressMessages(get_gambl_metadata())  #use pre-defined custom sample sets only_blgsp_metadata = get_gambl_metadata(case_set = \"BLGSP-study\")  #override default filters and request metadata for samples other than tumour genomes, #e.g. also get the normals tumour_and_normal_metadata = get_gambl_metadata(tissue_status_filter = c('tumour','normal'))  non_redundant_genome_and_capture = get_gambl_metadata(seq_type_filter = c('genome', 'capture'),                                                        seq_type_priority = \"genome\")                                                         absolutely_everything = get_gambl_metadata(seq_type_filter = c('genome', 'capture','mrna'), tissue_status_filter=c('tumour','normal')) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_each_tool_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Each Tool Results. — populate_each_tool_result","title":"Populate Each Tool Results. — populate_each_tool_result","text":"Convenience function returning results specified tool.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_each_tool_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Each Tool Results. — populate_each_tool_result","text":"","code":"populate_each_tool_result(   tool,   genome_builds,   unix_groups,   include_silent = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_each_tool_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Each Tool Results. — populate_each_tool_result","text":"tool Name tool get results . genome_builds single genome build vector genome builds process. unix_groups single unix group vector unix groups process. include_silent Logical parameter indicating whether include silent mutations coding mutations. Default FALSE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_each_tool_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Each Tool Results. — populate_each_tool_result","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_each_tool_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Populate Each Tool Results. — populate_each_tool_result","text":"function takes tool name tool well parameters specifying requested result. parameters include genome_build, can just one parameter vector different genome builds return results . Similarly, unix_group can take either one value vector different unix groups return results . Lastly, user can subset returned results silent mutations. done setting include_silent = TRUE (default FALSE).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_each_tool_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate Each Tool Results. — populate_each_tool_result","text":"","code":"if (FALSE) { # \\dontrun{   tool_results = populate_each_tool_result(\"smlims_3\", \"grch37\", \"gambl\", FALSE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_tool_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Tool Results. — populate_tool_results","title":"Populate Tool Results. — populate_tool_results","text":"Populate database per-sample summarized results various tools.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_tool_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Tool Results. — populate_tool_results","text":"","code":"populate_tool_results(tool_name)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_tool_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Tool Results. — populate_tool_results","text":"tool_name Name tool get results .","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_tool_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Tool Results. — populate_tool_results","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_tool_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Populate Tool Results. — populate_tool_results","text":"function still draft mode, export NAMESPACE removed now.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/populate_tool_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate Tool Results. — populate_tool_results","text":"","code":"if (FALSE) { # \\dontrun{ results = populate_tool_results(tool_name = \"slims_3\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pretty_lymphoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"LymphGen feature visualization. — pretty_lymphoplot","title":"LymphGen feature visualization. — pretty_lymphoplot","text":"Make heatmap showing frequency LymphGen features across cohort samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pretty_lymphoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LymphGen feature visualization. — pretty_lymphoplot","text":"","code":"pretty_lymphoplot(   these_samples_metadata,   flavour = \"with_cnvs.with_sv.with_A53\",   lymphgen_all,   with_A53 = FALSE,   show_side_annotation = FALSE,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pretty_lymphoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LymphGen feature visualization. — pretty_lymphoplot","text":"these_samples_metadata data frame containing metadata samples (LymphGen result subset sample_id data frame). flavour Required output get_lymphgen provided. lymphgen_all list returned get_lymphgen. with_A53 Set FALSE using LymphGen results without A53. Recommended option. show_side_annotation Set TRUE want default ComplexHeatmap annotations sides heatmap. Default FALSE. verbose Set TRUE print helpful messages. Useful debugging. Default FALSE (verbose).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pretty_lymphoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LymphGen feature visualization. — pretty_lymphoplot","text":"ComplexHeatmap object","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/pretty_lymphoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LymphGen feature visualization. — pretty_lymphoplot","text":"","code":"meta_df = suppressMessages(get_gambl_metadata()) %>%    dplyr::filter(seq_type %in% c(\"genome\", \"capture\")) %>%      dplyr::filter(pathology == \"DLBCL\") pretty_lymphoplot(meta_df, show_side_annotation = TRUE) #> Joining with `by = join_by(Sample.Name, BTG2)` #> Joining with `by = join_by(Sample.Name)` #> Joining with `by = join_by(Sample.Name, SOCS1)` #> Joining with `by = join_by(Sample.Name)` #> Joining with `by = join_by(sample_id)` #> Warning: The input is a data frame-like object, convert it to a matrix. #> Warning: Note: not all columns in the data frame are numeric. The data frame #> will be converted into a character matrix. #> `use_raster` is automatically set to TRUE for a matrix with more than #> 2000 rows. You can control `use_raster` argument by explicitly setting #> TRUE/FALSE to it. #>  #> Set `ht_opt$message = FALSE` to turn off this message. #> 'magick' package is suggested to install to give better rasterization. #>  #> Set `ht_opt$message = FALSE` to turn off this message.   pretty_lymphoplot(      meta_df,      show_side_annotation = TRUE,      flavour = \"with_cnvs.with_sv.no_A53\" ) #> NO A53 #> Joining with `by = join_by(Sample.Name)` #> Joining with `by = join_by(Sample.Name, BTG2)` #> Joining with `by = join_by(Sample.Name)` #> Joining with `by = join_by(Sample.Name, SOCS1)` #> Running in the mode without A53 ... #> Joining with `by = join_by(sample_id)` #> Warning: The input is a data frame-like object, convert it to a matrix. #> Warning: Note: not all columns in the data frame are numeric. The data frame #> will be converted into a character matrix. #> `use_raster` is automatically set to TRUE for a matrix with more than #> 2000 rows. You can control `use_raster` argument by explicitly setting #> TRUE/FALSE to it. #>  #> Set `ht_opt$message = FALSE` to turn off this message. #> 'magick' package is suggested to install to give better rasterization. #>  #> Set `ht_opt$message = FALSE` to turn off this message."},{"path":"https://morinlab.github.io/GAMBLR.results/reference/tidy_gene_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy gene Expression. — tidy_gene_expression","title":"Tidy gene Expression. — tidy_gene_expression","text":"Read full expression matrix.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/tidy_gene_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy gene Expression. — tidy_gene_expression","text":"","code":"tidy_gene_expression(return_df = FALSE)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/tidy_gene_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy gene Expression. — tidy_gene_expression","text":"return_df Boolean parameter return dataframe, default FALSE (.e writing results file).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/tidy_gene_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy gene Expression. — tidy_gene_expression","text":"Read full expression matrix subset samples GAMBL metadata (remove duplicates consistent preferences). user can also specify want data frame returned R session, data frame written file (default).","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/tidy_gene_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy gene Expression. — tidy_gene_expression","text":"","code":"if (FALSE) { # \\dontrun{ #return data frame with gene expression to R gene_expression = tidy_gene_expression(return_df = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/write_sample_set_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Sample Set Hash — write_sample_set_hash","title":"Write Sample Set Hash — write_sample_set_hash","text":"Update create file track unique identifiers sample sets GAMBL","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/write_sample_set_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Sample Set Hash — write_sample_set_hash","text":"","code":"write_sample_set_hash(update = TRUE, new_sample_sets_df)"},{"path":"https://morinlab.github.io/GAMBLR.results/reference/write_sample_set_hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Sample Set Hash — write_sample_set_hash","text":"update Leave TRUE default functionality (.e. updating existing table). table exist probably need pull Master. new_sample_sets_df Data frame existing new sample sets. Required running default update mode.","code":""},{"path":"https://morinlab.github.io/GAMBLR.results/reference/write_sample_set_hash.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write Sample Set Hash — write_sample_set_hash","text":"Run function update = TRUE (default) use existing sample table. table exist, perhaps need pull master branch. function run default update, user must also provide new sample sets new_sample_sets_df.","code":""}]
