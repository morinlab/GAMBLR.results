% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_cnv_and_ssm_status.R
\name{get_cnv_and_ssm_status}
\alias{get_cnv_and_ssm_status}
\title{Get CNV and coding SSM combined status}
\usage{
get_cnv_and_ssm_status(
  genes_and_cn_threshs,
  these_samples_metadata,
  maf_df,
  this_seq_type = "genome",
  only_cnv = "none",
  genome_build = "grch37",
  include_hotspots = TRUE,
  review_hotspots = TRUE,
  seg_data,
  adjust_for_ploidy = FALSE,
  include_silent = FALSE
)
}
\arguments{
\item{genes_and_cn_threshs}{A data frame with columns "gene_id" and "cn_thresh". The "gene_id" column stores
gene symbols (characters) which determine the regions to return CNV and/or coding SSM status. The "cn_thresh"
column stores integers that mean the maximum or minimum CN states to return status 1 (contains CNV) for
its respective gene. If this integer is below 2 (neutral CN state for diploids), it is taken as the maximum
(gene consider as tumor suppressor); if above 2, it is the minimum (oncogene); if equal to 2, do not consider
CNV to return status.}

\item{these_samples_metadata}{The metadata for samples of interest to be included in the returned matrix.
Can be created with \code{get_gambl_metadata} function.}

\item{maf_df}{Optional data frame containing the coding variants for your samples (i.e. output from \code{get_all_coding_ssm})}

\item{this_seq_type}{The seq type to get results for. Possible values are "genome" (default) or "capture".}

\item{only_cnv}{A vector of gene names indicating the genes for which only CNV status should be considered,
ignoring SSM status. Set this argument to "all" or "none" (default) to apply this behavior to all or none
of the genes, respectively.}

\item{genome_build}{Reference genome build. Possible values are "grch37" (default) or "hg38".}

\item{include_hotspots}{Logical parameter indicating whether hotspots object should also be tabulated. Default is TRUE.}

\item{review_hotspots}{Logical parameter indicating whether hotspots object should be reviewed to include
functionally relevant mutations or rare lymphoma-related genes. Default is TRUE.}

\item{seg_data}{Optionally provide the function with a data frame of segments that will be used instead of the GAMBL flatfiles}

\item{include_silent}{Set to TRUE if you want Synonymous mutations to also be considered}
}
\value{
A data frame with CNV and SSM combined status.
}
\description{
For each specified chromosome region (gene name), return status 1 if the copy number (CN)
state is non-neutral, \emph{i.e.} different from 2, or if the region contains any coding simple somatic mutation (SSM).
}
\details{
The user can choose from which regions are intended to return only copy number variation (CNV) status,
only coding SSM status, or at least the presence of one of them. This behavior is controlled by the arguments
\code{genes_and_cn_threshs} (column \code{cn_thresh}) and \code{only_cnv}.

This function internally calls the \code{get_cn_states}, \code{get_ssm_by_samples} and \code{get_coding_ssm_status}functions.
Therefore, many of its arguments are assigned to these functions. If needed, see the documentation of these
functions for more information.

In the case of returning NA values, this is due to the \code{get_cn_segments} function not being able to internally
return any copy number segments from the specified chromosome region.
}
\examples{

# Get sample meta data
this_meta = get_gambl_metadata() \%>\% dplyr::filter(pathology == "BL")

# For MYC and SYNCRIP, return CNV and SSM combined status; for MIR17HG, 
# return only CNV status; for CCND3 return only SSM status
genes_and_cn_threshs = data.frame(
  gene_id=c("MYC", "MIR17HG", "CCND3", "SYNCRIP"),
  cn_thresh=c(3, 3, 2, 1)
)
genome_cnv_ssm_status = get_cnv_and_ssm_status(
                           genes_and_cn_threshs,
                           this_meta,
                           only_cnv = "MIR17HG", 
                           this_seq_type = "genome")
                           
exome_cnv_ssm_status = get_cnv_and_ssm_status(
                           genes_and_cn_threshs,
                           this_meta,
                           only_cnv = "MIR17HG", 
                           this_seq_type = "capture")


genome_cnv_without_ssm_status = get_cnv_and_ssm_status(
                                  genes_and_cn_threshs,
                                  this_meta,
                                  only_cnv = "all")

}
