% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_gene_expression.R
\name{get_gene_expression}
\alias{get_gene_expression}
\title{Get Gene Expression.}
\usage{
get_gene_expression(
  these_samples_metadata,
  hugo_symbols,
  ensembl_gene_ids,
  all_genes = FALSE,
  verbose = FALSE,
  engine = "grep",
  from_merge = TRUE
)
}
\arguments{
\item{these_samples_metadata}{The data frame with sample metadata. Usually output of the get_gambl_metadata().}

\item{hugo_symbols}{One or more gene symbols. Cannot be used in conjunction with ensembl_gene_ids.}

\item{ensembl_gene_ids}{One or more ensembl gene IDs. Cannot be used in conjunction with hugo_symbols.}

\item{all_genes}{Set to TRUE to return the full expression data frame without any subsetting (see warnings below).}

\item{engine}{Either readr or grep. The grep engine usually will increase the speed of loading but doesn't work if you want all genes or a very long list.}
}
\value{
A data frame with the first 9 columns identical to the columns from check_gene_expression and the remaining columns containing the expression values for each gene requested.
}
\description{
Get the expression for one or more genes for all GAMBL samples.
}
\details{
Efficiently retrieve variance-stabilized and batch effect corrected gene expression values for one, multiple or all genes for all GAMBL samples.
For examples and more info, refer to the parameter descriptions as well as vignette examples.

Warnings:
\enumerate{
\item The speed of loading data is heavily impacted by how many samples you load. For the sake of efficiency, be sure not to specify extraneous samples.
\item To reduce impact on memory (RAM), load only the data for the genes you need.
\item To get the most complete set of RNA-seq data, be sure to call get_gambl_metadata(seq_type = "mrna") otherwise it will default to genomes.
\item Before you run this function, it's recommended that you run \code{check_gene_expression} to determine which samples are available
}
}
\examples{

# Get the expression for a single gene for every sample with RNA-seq data in GAMBL
# When tested on a gphost, this took about 4 minutes to run with the readr engine
SOX11_exp_all = get_gene_expression(these_samples_metadata = 
                                       get_gambl_metadata(seq_type_filter="mrna"),
                                       hugo_symbols = "SOX11")
                                       
# Get the expression for a single gene for every sample with both RNA-seq data AND genome data in GAMBL
# When tested on a gphost, this took about 2 minutes to run with the default readr engine and 11 seconds with the grep engine
SOX11_exp_all = get_gene_expression(these_samples_metadata = 
                                       get_gambl_metadata(seq_type_filter="genome"),
                                       hugo_symbols = "SOX11",
                                       engine = "grep")

# Get the expression values for the Wright gene set from every DLBCL sample with either genome or capture data in GAMBL.
# When tested on a gphost, this took about 3 minutes to run with the readr engine and about a minute with the grep engine
wright_gene_expr_all_DLBCL_with_DNA = get_gene_expression(hugo_symbols = GAMBLR.data::wright_genes_with_weights$Hugo_Symbol,
                                                 these_samples_metadata = get_gambl_metadata(seq_type_filter = c('genome','capture')) \%>\% 
                                                 dplyr::filter(pathology=="DLBCL"))

#Load the full expression values for every FL sample with no subsetting on genes
# When tested on a gphost, this took about 6 minutes to run
FL_expression_df = get_gene_expression(these_samples_metadata = 
                                                 get_gambl_metadata(seq_type_filter="mrna") \%>\% 
                                                     dplyr::filter(pathology=="FL"),
                                                 all_genes = TRUE)


}
