% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_cn_segments.R
\name{get_cn_segments}
\alias{get_cn_segments}
\title{Get CN Segments.}
\usage{
get_cn_segments(these_samples_metadata, projection = "grch37", this_seq_type)
}
\arguments{
\item{these_samples_metadata}{User must provide a metadata table to restrict the data to the samples in your table.
The metadata also ensures the proper handling of duplicate sample_id across seq_types and ensures the
seq_type in the metadata faithfully represents the seq_type of the data}

\item{projection}{Desired genome coordinate system for returned CN segments. Default is "grch37".}

\item{this_seq_type}{Deprecated.}
}
\value{
A data frame with CN segments for the specified region.
}
\description{
Retrieve all copy number segments from the GAMBL outputs
}
\details{
This function merely loads and returns all the seg_data available for a projection (genome build)
}
\examples{
# Example for the capture samples:
# Get metadata for just a few capture samples
capture_metadata = suppressMessages(get_gambl_metadata()) \%>\%
                      dplyr::filter(seq_type=="capture") \%>\% head()

# Load the copy number segments for the capture samples using hg38 projection
capture_segments_hg38 = get_cn_segments(
                             these_samples_metadata = capture_metadata,
                             projection="hg38")
print(capture_segments_hg38)

genome_metadata = suppressMessages(get_gambl_metadata()) \%>\%
                      dplyr::filter(seq_type=="genome") \%>\% head()
# Create a metadata table with a mix of seq_types
mixed_seq_type_meta = dplyr::bind_rows(capture_metadata,genome_metadata)
capture_segments_default = get_cn_segments(
                             these_samples_metadata = mixed_seq_type_meta)
dplyr::group_by(capture_segments_default, ID) \%>\% 
dplyr::summarize(n=dplyr::n())
# Note the default projection is "grch37"
print(capture_segments_default)
}
