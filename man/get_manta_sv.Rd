% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_manta_sv.R
\name{get_manta_sv}
\alias{get_manta_sv}
\title{Get Manta SVs}
\usage{
get_manta_sv(
  these_samples_metadata = NULL,
  projection = "grch37",
  region,
  min_vaf = 0.1,
  min_score = 40,
  pass_filters = TRUE,
  verbose = TRUE,
  from_cache = TRUE,
  write_to_file = FALSE,
  chromosome,
  qstart,
  qend,
  these_sample_ids = NULL,
  pairing_status
)
}
\arguments{
\item{these_samples_metadata}{A metadata data frame to limit the
result to sample_ids within it}

\item{projection}{The projection genome build. Default is grch37.}

\item{region}{Specify a single region to fetch SVs anchored within
using the format "chrom:start-end"}

\item{min_vaf}{The minimum tumour VAF for a SV to be returned.
Default is 0.1.}

\item{min_score}{The lowest Manta somatic score for a SV to be returned.
Default is 40.}

\item{pass_filters}{If TRUE (default) only return SVs that are annotated with
PASS in the FILTER column. Set to FALSE to keep all variants,
regardless if they PASS the filters.}

\item{verbose}{Set to FALSE to minimize the output to console.
Default is TRUE. This parameter also dictates the verbose-ness of
any helper function internally called inside the main function.}

\item{from_cache}{Boolean variable for using cached results, default is TRUE.
If \code{write_to_file = TRUE}, this parameter auto-defaults to FALSE.}

\item{write_to_file}{Boolean statement that outputs bedpe file if TRUE,
default is FALSE.
Setting this to TRUE forces \code{from_cache = FALSE}.}

\item{chromosome}{DEPRECATED. Use \code{region} instead.}

\item{qstart}{DEPRECATED. Use \code{region} instead.}

\item{qend}{DEPRECATED. Use \code{region} instead.}

\item{these_sample_ids}{DEPRECATED. Use \code{these_samples_metadata} instead.}

\item{pairing_status}{DEPRECATED.
Subset your metadata and supply these_samples_metadata instead.}
}
\value{
A data frame in a bedpe-like format with additional
columns that allow filtering of high-confidence SVs.
}
\description{
Retrieve Manta SVs and filter.
}
\details{
Retrieve Manta SVs with additional VCF information to allow for
filtering of high-confidence variants.
To get SV calls for multiple samples, supply a metadata table via
\code{these_samples_metadata} that has been subset to only those samples.
The results will be restricted to the sample_ids within that data frame.
This function relies on a set of specific internal functions
\link{get_manta_sv_by_samples} (if \code{from_cache = FALSE}).
This function can also restrict the returned breakpoints within a genomic
region specified via \code{region} (in chr:start-end format).
Useful filtering parameters are also available, use \code{min_vaf} to set the
minimum tumour VAF for a SV to be returned and \code{min_score}
to set the lowest Manta somatic score for a SV to be returned.
In addition, the user can chose to return all variants, even
the ones not passing the filter criteria. To do so,
set \code{pass_filters = FALSE} (defaults to TRUE).
\subsection{\strong{Advanced settings (probably not for you)}}{

Is it advised to leave the default \code{from_cache} setting to TRUE.
To ensure manta results arre pulled from a pre-generated merge
(i.e. the cached result).
If set to FALSE in combination with \code{write_to_file = TRUE},
the function will (re)generate new merged manta calls, if the user has
the required file permissions.
Note, that if \code{write_to_file} is set to TRUE, the function defaults
\code{from_cache = FALSE} to avoid nonsense parameter combinations.
Is this function not what you are looking for? You may want:
\link{get_combined_sv}
After running this or \link{get_combined_sv}, you most likely want to
annotate the result using \link[GAMBLR.utils:annotate_sv]{GAMBLR.utils::annotate_sv}
}
}
\examples{
# lazily get every SV in the table with default quality filters
all_sv <- get_manta_sv()
head(all_sv)

# get all SVs for just one cohort
cohort_meta = suppressMessages(get_gambl_metadata()) \%>\% 
              dplyr::filter(cohort == "DLBCL_cell_lines")

some_sv <- get_manta_sv(these_samples_metadata = cohort_meta, verbose=FALSE)
head(some_sv)
nrow(some_sv)

# get the SVs in a region around MYC
# WARNING: This is not the best way to find MYC SVs.
# Use annotate_sv on the full SV set instead.
myc_region_hg38 = "chr8:127710883-127761821"
myc_region_grch37 = "8:128723128-128774067"

hg38_myc_locus_sv <- get_manta_sv(region = myc_region_hg38,
                                projection = "hg38",
                                verbose = FALSE)
head(hg38_myc_locus_sv)
nrow(hg38_myc_locus_sv)

incorrect_myc_locus_sv <- get_manta_sv(region = myc_region_grch37,
                                projection = "hg38",
                                verbose = FALSE)
head(incorrect_myc_locus_sv)
nrow(incorrect_myc_locus_sv)

# Despite potentially being incomplete, we can nonetheless
# annotate these directly for more details
annotated_myc_hg38 = suppressMessages(
         annotate_sv(hg38_myc_locus_sv, genome_build = "hg38")
)
head(annotated_myc_hg38)
table(annotated_myc_hg38$partner)
# The usual MYC partners are seen here

annotated_myc_incorrect = suppressMessages(
         annotate_sv(incorrect_myc_locus_sv, genome_build = "hg38")
)
head(annotated_myc_incorrect)
table(annotated_myc_incorrect$partner)
# The effect of specifying the wrong coordinate is evident

}
