% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_ssm_by_regions.R
\name{get_ssm_by_regions}
\alias{get_ssm_by_regions}
\title{Get SSM By Regions.}
\usage{
get_ssm_by_regions(
  regions_list,
  regions_bed,
  these_samples_metadata,
  maf_data,
  use_name_column = FALSE,
  streamlined = FALSE,
  basic_columns = TRUE,
  tool_name = "slms_3",
  augmented = TRUE,
  projection = "grch37",
  min_read_support = 3,
  verbose = FALSE,
  these_sample_ids,
  this_seq_type
)
}
\arguments{
\item{regions_list}{Either provide a vector of regions in the chr:start-end format OR}

\item{regions_bed}{Better yet, provide a bed file with the coordinates you want to retrieve.}

\item{these_samples_metadata}{Optional metadata table.
If provided, it will return SSM calls for the only the samples in the metadata table.
Otherwise it will use all samples from \code{get_gambl_metadata()} of the appropriate seq_types.}

\item{maf_data}{Use an already loaded MAF data frame.
If you would like all columns of this input maf returned,
set \code{streamlined = FALSE} and \code{basic_columns = FALSE}.
Otherwise the first 45 columns will be returned.}

\item{use_name_column}{If TRUE and your bed-format data frame has a name column
(must be named "name") these can be used to name your regions. To be used with streamlined = TRUE. Default: FALSE.}

\item{streamlined}{If TRUE, only 3 columns will be returned:
start, sample_id, and region in the format "chr:start-end". Default is FALSE.
Note: if this parameter is TRUE, the function will disregard anything specified with \code{basic_columns}.}

\item{basic_columns}{Parameter to be used when streamlined is FALSE.
Set this parameter to TRUE (default) to return a MAF with the standard 45 columns.
Set to FALSE to return a MAF with all columns (116).
If you provided \code{maf_data} with more than 45 columns, set to FALSE to return all columns of
\code{maf_data}, otherwise it will return the first 45.}

\item{tool_name}{Accepts either "slms_3" (default) or "strelka2"
(forces \code{streamlined=TRUE}) to indicate which variant caller to use. Note: strelka2 will force
\code{augmented=FALSE} as data is not available in that case. Formerly called "mode".}

\item{augmented}{Default: TRUE. Setting to FALSE will subset from a pre-merged MAF.
Obtaining variants from the original MAFs for each sample would not be computationally efficient here.
Provide to \code{maf_data} the results of \code{get_ssm_by_samples} if those are needed.}

\item{projection}{Obtain variants projected to this reference, one of grch37 (default) or hg38.}

\item{min_read_support}{Only returns variants with at least this many reads in t_alt_count
(for cleaning up augmented MAFs). Default: 3.}

\item{verbose}{Boolean parameter set to FALSE per default.}

\item{these_sample_ids}{Deprecated. Inferred from these_samples_metadata}

\item{this_seq_type}{Deprecated. Inferred from these_samples_metadata}
}
\value{
Returns a data frame of variants in 3 column format or in MAF-like format (one row per mutation).
}
\description{
Efficiently retrieve all mutations across a range of genomic regions.
}
\details{
This function internally calls \link{get_ssm_by_region} to retrieve SSM calls for the specified regions.
See parameter descriptions for \link{get_ssm_by_region} for more information on how the different parameters can be called.
Is this function not what you are looking for? Try one of the following, similar, functions; \link{get_coding_ssm},
\link{get_coding_ssm_status}, \link{get_ssm_by_sample},
\link{get_ssm_by_samples}, \link{get_ssm_by_region}
}
\examples{

# Adds column `name` to the bed-format dataframe
# by combining "gene" and "region" values sep by "-"
regions_bed = GAMBLR.utils::create_bed_data(
   GAMBLR.data::grch37_ashm_regions,
   fix_names = "concat",
   concat_cols = c("gene","region"),sep="-"
) \%>\% head(20)

DLBCL_meta = suppressMessages(get_gambl_metadata()) \%>\%
                dplyr::filter(pathology=="DLBCL", seq_type == "genome")
ashm_MAF = get_ssm_by_regions(regions_bed = regions_bed,
                             these_samples_metadata = DLBCL_meta,
                             streamlined=FALSE)
ashm_MAF \%>\% dplyr::arrange(Start_Position,Tumor_Sample_Barcode) \%>\%
              dplyr::select(Hugo_Symbol,
                    Tumor_Sample_Barcode,
                    Chromosome,Start_Position,
                    Reference_Allele,Tumor_Seq_Allele2)


}
